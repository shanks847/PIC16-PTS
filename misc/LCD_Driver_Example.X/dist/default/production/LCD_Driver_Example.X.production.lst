

Microchip Technology PIC18 LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Thu Aug 01 08:50:33 2019

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1                           	processor	18F2550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1
    16                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    17                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    18  0000                     
    19                           ; Version 2.00
    20                           ; Generated 27/05/2018 GMT
    21                           ; 
    22                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    23                           ; All rights reserved.
    24                           ; 
    25                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    26                           ; 
    27                           ; Redistribution and use in source and binary forms, with or without modification, are
    28                           ; permitted provided that the following conditions are met:
    29                           ; 
    30                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    31                           ;        conditions and the following disclaimer.
    32                           ; 
    33                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    34                           ;        of conditions and the following disclaimer in the documentation and/or other
    35                           ;        materials provided with the distribution.
    36                           ; 
    37                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    38                           ;        software without specific prior written permission.
    39                           ; 
    40                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    41                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    42                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    43                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    44                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    45                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    46                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    47                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    48                           ; 
    49                           ; 
    50                           ; Code-generator required, PIC18F2550 Definitions
    51                           ; 
    52                           ; SFR Addresses
    53  0000                     _TRISB	set	3987
    54  0000                     _TRISB4	set	31900
    55  0000                     _TRISB5	set	31901
    56  0000                     _RB4	set	31756
    57  0000                     _RB5	set	31757
    58  0000                     _RB3	set	31755
    59  0000                     _RB2	set	31754
    60  0000                     _RB1	set	31753
    61  0000                     _RB0	set	31752
    62                           
    63                           	psect	smallconst
    64  000800                     __psmallconst:
    65                           	opt stack 0
    66  000800  00                 	db	0
    67  000801                     STR_1:
    68  000801  48                 	db	72	;'H'
    69  000802  65                 	db	101	;'e'
    70  000803  6C                 	db	108	;'l'
    71  000804  6C                 	db	108	;'l'
    72  000805  6F                 	db	111	;'o'
    73  000806  20                 	db	32
    74  000807  57                 	db	87	;'W'
    75  000808  6F                 	db	111	;'o'
    76  000809  72                 	db	114	;'r'
    77  00080A  6C                 	db	108	;'l'
    78  00080B  64                 	db	100	;'d'
    79  00080C  00                 	db	0
    80  00080D  00                 	db	0
    81                           
    82                           ; #config settings
    83  00080E  00                 	db	0	; dummy byte at the end
    84  0000                     
    85                           	psect	cinit
    86  000A04                     __pcinit:
    87                           	opt stack 0
    88  000A04                     start_initialization:
    89                           	opt stack 0
    90  000A04                     __initialization:
    91                           	opt stack 0
    92  000A04                     end_of_initialization:
    93                           	opt stack 0
    94  000A04                     __end_of__initialization:
    95                           	opt stack 0
    96  000A04  0E00               	movlw	low (__Lsmallconst shr (0+16))
    97  000A06  6EF8               	movwf	tblptru,c
    98  000A08  0E08               	movlw	high __Lsmallconst
    99  000A0A  6EF7               	movwf	tblptrh,c
   100  000A0C  0100               	movlb	0
   101  000A0E  EFE3  F004         	goto	_main	;jump to C main() function
   102                           tblptru	equ	0xFF8
   103                           tblptrh	equ	0xFF7
   104                           
   105                           	psect	cstackCOMRAM
   106  000001                     __pcstackCOMRAM:
   107                           	opt stack 0
   108  000001                     LCD_DATA@Data:
   109                           	opt stack 0
   110                           
   111                           ; 1 bytes @ 0x0
   112  000001                     	ds	1
   113  000002                     ??_LCD_CMD:
   114  000002                     ??_LCD_Write_Char:
   115                           
   116                           ; 1 bytes @ 0x1
   117  000002                     	ds	1
   118  000003                     LCD_CMD@CMD:
   119                           	opt stack 0
   120  000003                     LCD_Write_Char@Low4:
   121                           	opt stack 0
   122                           
   123                           ; 1 bytes @ 0x2
   124  000003                     	ds	1
   125  000004                     ??_LCD_Init:
   126  000004                     LCD_Set_Cursor@c:
   127                           	opt stack 0
   128  000004                     LCD_Write_Char@High4:
   129                           	opt stack 0
   130                           
   131                           ; 1 bytes @ 0x3
   132  000004                     	ds	1
   133  000005                     LCD_Set_Cursor@r:
   134                           	opt stack 0
   135  000005                     LCD_Write_Char@Data:
   136                           	opt stack 0
   137                           
   138                           ; 1 bytes @ 0x4
   139  000005                     	ds	1
   140  000006                     LCD_Set_Cursor@Low4:
   141                           	opt stack 0
   142  000006                     LCD_Write_String@str:
   143                           	opt stack 0
   144                           
   145                           ; 2 bytes @ 0x5
   146  000006                     	ds	1
   147  000007                     LCD_Set_Cursor@High4:
   148                           	opt stack 0
   149                           
   150                           ; 1 bytes @ 0x6
   151  000007                     	ds	1
   152  000008                     ??_LCD_Write_String:
   153  000008                     LCD_Set_Cursor@Temp:
   154                           	opt stack 0
   155                           
   156                           ; 1 bytes @ 0x7
   157  000008                     	ds	2
   158  00000A                     LCD_Write_String@i:
   159                           	opt stack 0
   160                           
   161                           ; 2 bytes @ 0x9
   162  00000A                     	ds	2
   163  00000C                     tblptru	equ	0xFF8
   164                           tblptrh	equ	0xFF7
   165                           
   166                           ; 1 bytes @ 0xB
   167 ;;
   168 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   169 ;;
   170 ;; *************** function _main *****************
   171 ;; Defined at:
   172 ;;		line 10 in file "main.c"
   173 ;; Parameters:    Size  Location     Type
   174 ;;		None
   175 ;; Auto vars:     Size  Location     Type
   176 ;;		None
   177 ;; Return value:  Size  Location     Type
   178 ;;                  1    wreg      void 
   179 ;; Registers used:
   180 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   181 ;; Tracked objects:
   182 ;;		On entry : 0/0
   183 ;;		On exit  : 0/0
   184 ;;		Unchanged: 0/0
   185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   186 ;;      Params:         0       0       0       0       0       0       0       0       0
   187 ;;      Locals:         0       0       0       0       0       0       0       0       0
   188 ;;      Temps:          0       0       0       0       0       0       0       0       0
   189 ;;      Totals:         0       0       0       0       0       0       0       0       0
   190 ;;Total ram usage:        0 bytes
   191 ;; Hardware stack levels required when called:    3
   192 ;; This function calls:
   193 ;;		_LCD_Clear
   194 ;;		_LCD_Init
   195 ;;		_LCD_Set_Cursor
   196 ;;		_LCD_Write_String
   197 ;; This function is called by:
   198 ;;		Startup code after reset
   199 ;; This function uses a non-reentrant model
   200 ;;
   201                           
   202                           	psect	text0
   203  0009C6                     __ptext0:
   204                           	opt stack 0
   205  0009C6                     _main:
   206                           	opt stack 28
   207                           
   208                           ;main.c: 12: LCD_Init();
   209                           
   210                           ;incstack = 0
   211  0009C6  EC08  F004         	call	_LCD_Init	;wreg free
   212                           
   213                           ;main.c: 13: LCD_Clear();
   214  0009CA  EC09  F005         	call	_LCD_Clear	;wreg free
   215                           
   216                           ;main.c: 14: LCD_Set_Cursor(1,1);
   217  0009CE  0E01               	movlw	1
   218  0009D0  6E04               	movwf	LCD_Set_Cursor@c,c
   219  0009D2  0E01               	movlw	1
   220  0009D4  EC81  F004         	call	_LCD_Set_Cursor
   221                           
   222                           ;main.c: 15: LCD_Write_String("Hello World\0");
   223  0009D8  0E01               	movlw	low STR_1
   224  0009DA  6E06               	movwf	LCD_Write_String@str,c
   225  0009DC  0E08               	movlw	high STR_1
   226  0009DE  6E07               	movwf	LCD_Write_String@str+1,c
   227  0009E0  ECA8  F004         	call	_LCD_Write_String	;wreg free
   228  0009E4                     l13:
   229                           
   230                           ;main.c: 17: {
   231  0009E4  D7FF               	goto	l13
   232  0009E6                     __end_of_main:
   233                           	opt stack 0
   234                           tblptru	equ	0xFF8
   235                           tblptrh	equ	0xFF7
   236                           
   237 ;; *************** function _LCD_Write_String *****************
   238 ;; Defined at:
   239 ;;		line 100 in file "LCD.c"
   240 ;; Parameters:    Size  Location     Type
   241 ;;  str             2    5[COMRAM] PTR unsigned char 
   242 ;;		 -> STR_1(13), 
   243 ;; Auto vars:     Size  Location     Type
   244 ;;  i               2    9[COMRAM] int 
   245 ;; Return value:  Size  Location     Type
   246 ;;                  1    wreg      void 
   247 ;; Registers used:
   248 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   249 ;; Tracked objects:
   250 ;;		On entry : 0/0
   251 ;;		On exit  : 0/0
   252 ;;		Unchanged: 0/0
   253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   254 ;;      Params:         2       0       0       0       0       0       0       0       0
   255 ;;      Locals:         2       0       0       0       0       0       0       0       0
   256 ;;      Temps:          2       0       0       0       0       0       0       0       0
   257 ;;      Totals:         6       0       0       0       0       0       0       0       0
   258 ;;Total ram usage:        6 bytes
   259 ;; Hardware stack levels used:    1
   260 ;; Hardware stack levels required when called:    2
   261 ;; This function calls:
   262 ;;		_LCD_Write_Char
   263 ;; This function is called by:
   264 ;;		_main
   265 ;; This function uses a non-reentrant model
   266 ;;
   267                           
   268                           	psect	text1
   269  000950                     __ptext1:
   270                           	opt stack 0
   271  000950                     _LCD_Write_String:
   272                           	opt stack 28
   273                           
   274                           ;LCD.c: 102: int i;;LCD.c: 103: for(i=0;str[i]!='\0';i++)
   275                           
   276                           ;incstack = 0
   277  000950  0E00               	movlw	0
   278  000952  6E0B               	movwf	LCD_Write_String@i+1,c
   279  000954  0E00               	movlw	0
   280  000956  6E0A               	movwf	LCD_Write_String@i,c
   281  000958  D010               	goto	l67
   282  00095A                     
   283                           ;LCD.c: 104: LCD_Write_Char(str[i]);
   284  00095A  500A               	movf	LCD_Write_String@i,w,c
   285  00095C  2406               	addwf	LCD_Write_String@str,w,c
   286  00095E  6E08               	movwf	??_LCD_Write_String& (0+255),c
   287  000960  500B               	movf	LCD_Write_String@i+1,w,c
   288  000962  2007               	addwfc	LCD_Write_String@str+1,w,c
   289  000964  6E09               	movwf	(??_LCD_Write_String+1)& (0+255),c
   290  000966  C008  FFF6         	movff	??_LCD_Write_String,tblptrl
   291  00096A  C009  FFF7         	movff	??_LCD_Write_String+1,tblptrh
   292  00096E                     	if	0	;tblptru may be non-zero
   293  00096E                     	endif
   294  00096E                     	if	0	;tblptru may be non-zero
   295  00096E                     	endif
   296  00096E  0008               	tblrd		*
   297  000970  50F5               	movf	tablat,w,c
   298  000972  EC51  F004         	call	_LCD_Write_Char
   299  000976  4A0A               	infsnz	LCD_Write_String@i,f,c
   300  000978  2A0B               	incf	LCD_Write_String@i+1,f,c
   301  00097A                     l67:
   302  00097A  500A               	movf	LCD_Write_String@i,w,c
   303  00097C  2406               	addwf	LCD_Write_String@str,w,c
   304  00097E  6E08               	movwf	??_LCD_Write_String& (0+255),c
   305  000980  500B               	movf	LCD_Write_String@i+1,w,c
   306  000982  2007               	addwfc	LCD_Write_String@str+1,w,c
   307  000984  6E09               	movwf	(??_LCD_Write_String+1)& (0+255),c
   308  000986  C008  FFF6         	movff	??_LCD_Write_String,tblptrl
   309  00098A  C009  FFF7         	movff	??_LCD_Write_String+1,tblptrh
   310  00098E                     	if	0	;tblptru may be non-zero
   311  00098E                     	endif
   312  00098E                     	if	0	;tblptru may be non-zero
   313  00098E                     	endif
   314  00098E  0008               	tblrd		*
   315  000990  50F5               	movf	tablat,w,c
   316  000992  0900               	iorlw	0
   317  000994  B4D8               	btfsc	status,2,c
   318  000996  0012               	return	
   319  000998  D7E0               	goto	l68
   320  00099A                     __end_of_LCD_Write_String:
   321                           	opt stack 0
   322                           tblptru	equ	0xFF8
   323                           tblptrh	equ	0xFF7
   324                           tblptrl	equ	0xFF6
   325                           tablat	equ	0xFF5
   326                           status	equ	0xFD8
   327                           
   328 ;; *************** function _LCD_Write_Char *****************
   329 ;; Defined at:
   330 ;;		line 83 in file "LCD.c"
   331 ;; Parameters:    Size  Location     Type
   332 ;;  Data            1    wreg     unsigned char 
   333 ;; Auto vars:     Size  Location     Type
   334 ;;  Data            1    4[COMRAM] unsigned char 
   335 ;;  High4           1    3[COMRAM] unsigned char 
   336 ;;  Low4            1    2[COMRAM] unsigned char 
   337 ;; Return value:  Size  Location     Type
   338 ;;                  1    wreg      void 
   339 ;; Registers used:
   340 ;;		wreg, status,2, status,0, cstack
   341 ;; Tracked objects:
   342 ;;		On entry : 0/0
   343 ;;		On exit  : 0/0
   344 ;;		Unchanged: 0/0
   345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   346 ;;      Params:         0       0       0       0       0       0       0       0       0
   347 ;;      Locals:         3       0       0       0       0       0       0       0       0
   348 ;;      Temps:          1       0       0       0       0       0       0       0       0
   349 ;;      Totals:         4       0       0       0       0       0       0       0       0
   350 ;;Total ram usage:        4 bytes
   351 ;; Hardware stack levels used:    1
   352 ;; Hardware stack levels required when called:    1
   353 ;; This function calls:
   354 ;;		_LCD_DATA
   355 ;; This function is called by:
   356 ;;		_LCD_Write_String
   357 ;; This function uses a non-reentrant model
   358 ;;
   359                           
   360                           	psect	text2
   361  0008A2                     __ptext2:
   362                           	opt stack 0
   363  0008A2                     _LCD_Write_Char:
   364                           	opt stack 28
   365                           
   366                           ;incstack = 0
   367                           ;LCD_Write_Char@Data stored from wreg
   368  0008A2  6E05               	movwf	LCD_Write_Char@Data,c
   369                           
   370                           ;LCD.c: 85: char Low4,High4;;LCD.c: 86: Low4 = Data & 0x0F;
   371  0008A4  5005               	movf	LCD_Write_Char@Data,w,c
   372  0008A6  0B0F               	andlw	15
   373  0008A8  6E03               	movwf	LCD_Write_Char@Low4,c
   374                           
   375                           ;LCD.c: 87: High4 = Data & 0xF0;
   376  0008AA  5005               	movf	LCD_Write_Char@Data,w,c
   377  0008AC  0BF0               	andlw	240
   378  0008AE  6E04               	movwf	LCD_Write_Char@High4,c
   379                           
   380                           ;LCD.c: 88: RB5 = 1;
   381  0008B0  8A81               	bsf	3969,5,c	;volatile
   382                           
   383                           ;LCD.c: 89: LCD_DATA(High4>>4);
   384  0008B2  3804               	swapf	LCD_Write_Char@High4,w,c
   385  0008B4  0B0F               	andlw	15
   386  0008B6  ECCD  F004         	call	_LCD_DATA
   387                           
   388                           ;LCD.c: 90: RB4 = 1;
   389  0008BA  8881               	bsf	3969,4,c	;volatile
   390                           
   391                           ;LCD.c: 91: _delay((unsigned long)((500)*(48000000/4000000.0)));
   392  0008BC  0E08               	movlw	8
   393  0008BE  6E02               	movwf	??_LCD_Write_Char& (0+255),c
   394  0008C0  0ECA               	movlw	202
   395  0008C2                     u117:
   396  0008C2  2EE8               	decfsz	wreg,f,c
   397  0008C4  D7FE               	bra	u117
   398  0008C6  2E02               	decfsz	??_LCD_Write_Char& (0+255),f,c
   399  0008C8  D7FC               	bra	u117
   400                           
   401                           ;LCD.c: 92: RB4 = 0;
   402  0008CA  9881               	bcf	3969,4,c	;volatile
   403                           
   404                           ;LCD.c: 93: _delay((unsigned long)((500)*(48000000/4000000.0)));
   405  0008CC  0E08               	movlw	8
   406  0008CE  6E02               	movwf	??_LCD_Write_Char& (0+255),c
   407  0008D0  0ECA               	movlw	202
   408  0008D2                     u127:
   409  0008D2  2EE8               	decfsz	wreg,f,c
   410  0008D4  D7FE               	bra	u127
   411  0008D6  2E02               	decfsz	??_LCD_Write_Char& (0+255),f,c
   412  0008D8  D7FC               	bra	u127
   413                           
   414                           ;LCD.c: 94: LCD_DATA(Low4);
   415  0008DA  5003               	movf	LCD_Write_Char@Low4,w,c
   416  0008DC  ECCD  F004         	call	_LCD_DATA
   417                           
   418                           ;LCD.c: 95: RB4 = 1;
   419  0008E0  8881               	bsf	3969,4,c	;volatile
   420                           
   421                           ;LCD.c: 96: _delay((unsigned long)((500)*(48000000/4000000.0)));
   422  0008E2  0E08               	movlw	8
   423  0008E4  6E02               	movwf	??_LCD_Write_Char& (0+255),c
   424  0008E6  0ECA               	movlw	202
   425  0008E8                     u137:
   426  0008E8  2EE8               	decfsz	wreg,f,c
   427  0008EA  D7FE               	bra	u137
   428  0008EC  2E02               	decfsz	??_LCD_Write_Char& (0+255),f,c
   429  0008EE  D7FC               	bra	u137
   430                           
   431                           ;LCD.c: 97: RB4 = 0;
   432  0008F0  9881               	bcf	3969,4,c	;volatile
   433                           
   434                           ;LCD.c: 98: _delay((unsigned long)((500)*(48000000/4000000.0)));
   435  0008F2  0E08               	movlw	8
   436  0008F4  6E02               	movwf	??_LCD_Write_Char& (0+255),c
   437  0008F6  0ECA               	movlw	202
   438  0008F8                     u147:
   439  0008F8  2EE8               	decfsz	wreg,f,c
   440  0008FA  D7FE               	bra	u147
   441  0008FC  2E02               	decfsz	??_LCD_Write_Char& (0+255),f,c
   442  0008FE  D7FC               	bra	u147
   443  000900  0012               	return		;funcret
   444  000902                     __end_of_LCD_Write_Char:
   445                           	opt stack 0
   446                           tblptru	equ	0xFF8
   447                           tblptrh	equ	0xFF7
   448                           tblptrl	equ	0xFF6
   449                           tablat	equ	0xFF5
   450                           wreg	equ	0xFE8
   451                           status	equ	0xFD8
   452                           
   453 ;; *************** function _LCD_Set_Cursor *****************
   454 ;; Defined at:
   455 ;;		line 40 in file "LCD.c"
   456 ;; Parameters:    Size  Location     Type
   457 ;;  r               1    wreg     unsigned char 
   458 ;;  c               1    3[COMRAM] unsigned char 
   459 ;; Auto vars:     Size  Location     Type
   460 ;;  r               1    4[COMRAM] unsigned char 
   461 ;;  Temp            1    7[COMRAM] unsigned char 
   462 ;;  High4           1    6[COMRAM] unsigned char 
   463 ;;  Low4            1    5[COMRAM] unsigned char 
   464 ;; Return value:  Size  Location     Type
   465 ;;                  1    wreg      void 
   466 ;; Registers used:
   467 ;;		wreg, status,2, status,0, cstack
   468 ;; Tracked objects:
   469 ;;		On entry : 0/0
   470 ;;		On exit  : 0/0
   471 ;;		Unchanged: 0/0
   472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   473 ;;      Params:         1       0       0       0       0       0       0       0       0
   474 ;;      Locals:         4       0       0       0       0       0       0       0       0
   475 ;;      Temps:          0       0       0       0       0       0       0       0       0
   476 ;;      Totals:         5       0       0       0       0       0       0       0       0
   477 ;;Total ram usage:        5 bytes
   478 ;; Hardware stack levels used:    1
   479 ;; Hardware stack levels required when called:    2
   480 ;; This function calls:
   481 ;;		_LCD_CMD
   482 ;; This function is called by:
   483 ;;		_main
   484 ;; This function uses a non-reentrant model
   485 ;;
   486                           
   487                           	psect	text3
   488  000902                     __ptext3:
   489                           	opt stack 0
   490  000902                     _LCD_Set_Cursor:
   491                           	opt stack 28
   492                           
   493                           ;incstack = 0
   494                           ;LCD_Set_Cursor@r stored from wreg
   495  000902  6E05               	movwf	LCD_Set_Cursor@r,c
   496                           
   497                           ;LCD.c: 42: unsigned char Temp,Low4,High4;;LCD.c: 43: if(r == 1)
   498  000904  0405               	decf	LCD_Set_Cursor@r,w,c
   499  000906  A4D8               	btfss	status,2,c
   500  000908  D00F               	goto	l56
   501                           
   502                           ;LCD.c: 44: {;LCD.c: 45: Temp = 0x80 + c - 1;
   503  00090A  5004               	movf	LCD_Set_Cursor@c,w,c
   504  00090C  0F7F               	addlw	127
   505  00090E  6E08               	movwf	LCD_Set_Cursor@Temp,c
   506                           
   507                           ;LCD.c: 46: High4 = Temp >> 4;
   508  000910  3808               	swapf	LCD_Set_Cursor@Temp,w,c
   509  000912  0B0F               	andlw	15
   510  000914  6E07               	movwf	LCD_Set_Cursor@High4,c
   511                           
   512                           ;LCD.c: 47: Low4 = Temp & 0x0F;
   513  000916  5008               	movf	LCD_Set_Cursor@Temp,w,c
   514  000918  0B0F               	andlw	15
   515  00091A  6E06               	movwf	LCD_Set_Cursor@Low4,c
   516                           
   517                           ;LCD.c: 48: LCD_CMD(High4);
   518  00091C  5007               	movf	LCD_Set_Cursor@High4,w,c
   519  00091E  ECF3  F004         	call	_LCD_CMD
   520                           
   521                           ;LCD.c: 49: LCD_CMD(Low4);
   522  000922  5006               	movf	LCD_Set_Cursor@Low4,w,c
   523  000924  ECF3  F004         	call	_LCD_CMD
   524  000928                     l56:
   525                           
   526                           ;LCD.c: 50: };LCD.c: 51: if(r == 2)
   527  000928  0E02               	movlw	2
   528  00092A  1805               	xorwf	LCD_Set_Cursor@r,w,c
   529  00092C  A4D8               	btfss	status,2,c
   530  00092E  0012               	return	
   531                           
   532                           ;LCD.c: 52: {;LCD.c: 53: Temp = 0xC0 + c - 1;
   533  000930  5004               	movf	LCD_Set_Cursor@c,w,c
   534  000932  0FBF               	addlw	191
   535  000934  6E08               	movwf	LCD_Set_Cursor@Temp,c
   536                           
   537                           ;LCD.c: 54: High4 = Temp >> 4;
   538  000936  3808               	swapf	LCD_Set_Cursor@Temp,w,c
   539  000938  0B0F               	andlw	15
   540  00093A  6E07               	movwf	LCD_Set_Cursor@High4,c
   541                           
   542                           ;LCD.c: 55: Low4 = Temp & 0x0F;
   543  00093C  5008               	movf	LCD_Set_Cursor@Temp,w,c
   544  00093E  0B0F               	andlw	15
   545  000940  6E06               	movwf	LCD_Set_Cursor@Low4,c
   546                           
   547                           ;LCD.c: 56: LCD_CMD(High4);
   548  000942  5007               	movf	LCD_Set_Cursor@High4,w,c
   549  000944  ECF3  F004         	call	_LCD_CMD
   550                           
   551                           ;LCD.c: 57: LCD_CMD(Low4);
   552  000948  5006               	movf	LCD_Set_Cursor@Low4,w,c
   553  00094A  ECF3  F004         	call	_LCD_CMD
   554  00094E  0012               	return	
   555  000950                     __end_of_LCD_Set_Cursor:
   556                           	opt stack 0
   557                           tblptru	equ	0xFF8
   558                           tblptrh	equ	0xFF7
   559                           tblptrl	equ	0xFF6
   560                           tablat	equ	0xFF5
   561                           wreg	equ	0xFE8
   562                           status	equ	0xFD8
   563                           
   564 ;; *************** function _LCD_Init *****************
   565 ;; Defined at:
   566 ;;		line 60 in file "LCD.c"
   567 ;; Parameters:    Size  Location     Type
   568 ;;		None
   569 ;; Auto vars:     Size  Location     Type
   570 ;;		None
   571 ;; Return value:  Size  Location     Type
   572 ;;                  1    wreg      void 
   573 ;; Registers used:
   574 ;;		wreg, status,2, cstack
   575 ;; Tracked objects:
   576 ;;		On entry : 0/0
   577 ;;		On exit  : 0/0
   578 ;;		Unchanged: 0/0
   579 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   580 ;;      Params:         0       0       0       0       0       0       0       0       0
   581 ;;      Locals:         0       0       0       0       0       0       0       0       0
   582 ;;      Temps:          2       0       0       0       0       0       0       0       0
   583 ;;      Totals:         2       0       0       0       0       0       0       0       0
   584 ;;Total ram usage:        2 bytes
   585 ;; Hardware stack levels used:    1
   586 ;; Hardware stack levels required when called:    2
   587 ;; This function calls:
   588 ;;		_LCD_CMD
   589 ;;		_LCD_DATA
   590 ;; This function is called by:
   591 ;;		_main
   592 ;; This function uses a non-reentrant model
   593 ;;
   594                           
   595                           	psect	text4
   596  000810                     __ptext4:
   597                           	opt stack 0
   598  000810                     _LCD_Init:
   599                           	opt stack 28
   600                           
   601                           ;LCD.c: 63: TRISB = 0x00;
   602                           
   603                           ;incstack = 0
   604  000810  0E00               	movlw	0
   605  000812  6E93               	movwf	3987,c	;volatile
   606                           
   607                           ;LCD.c: 64: TRISB5 = 0;
   608  000814  9A93               	bcf	3987,5,c	;volatile
   609                           
   610                           ;LCD.c: 65: TRISB4 = 0;
   611  000816  9893               	bcf	3987,4,c	;volatile
   612                           
   613                           ;LCD.c: 67: LCD_DATA(0x00);
   614  000818  0E00               	movlw	0
   615  00081A  ECCD  F004         	call	_LCD_DATA
   616                           
   617                           ;LCD.c: 68: _delay((unsigned long)((30)*(48000000/4000.0)));
   618  00081E  0E02               	movlw	2
   619  000820  6E05               	movwf	(??_LCD_Init+1)& (0+255),c
   620  000822  0ED4               	movlw	212
   621  000824  6E04               	movwf	??_LCD_Init& (0+255),c
   622  000826  0E85               	movlw	133
   623  000828                     u157:
   624  000828  2EE8               	decfsz	wreg,f,c
   625  00082A  D7FE               	bra	u157
   626  00082C  2E04               	decfsz	??_LCD_Init& (0+255),f,c
   627  00082E  D7FC               	bra	u157
   628  000830  2E05               	decfsz	(??_LCD_Init+1)& (0+255),f,c
   629  000832  D7FA               	bra	u157
   630  000834  F000               	nop	
   631                           
   632                           ;LCD.c: 69: _delay((unsigned long)((500)*(48000000/4000000.0)));
   633  000836  0E08               	movlw	8
   634  000838  6E04               	movwf	??_LCD_Init& (0+255),c
   635  00083A  0ECA               	movlw	202
   636  00083C                     u167:
   637  00083C  2EE8               	decfsz	wreg,f,c
   638  00083E  D7FE               	bra	u167
   639  000840  2E04               	decfsz	??_LCD_Init& (0+255),f,c
   640  000842  D7FC               	bra	u167
   641                           
   642                           ;LCD.c: 70: LCD_CMD(0x03);
   643  000844  0E03               	movlw	3
   644  000846  ECF3  F004         	call	_LCD_CMD
   645                           
   646                           ;LCD.c: 71: _delay((unsigned long)((5)*(48000000/4000.0)));
   647  00084A  0E4E               	movlw	78
   648  00084C  6E04               	movwf	??_LCD_Init& (0+255),c
   649  00084E  0EEB               	movlw	235
   650  000850                     u177:
   651  000850  2EE8               	decfsz	wreg,f,c
   652  000852  D7FE               	bra	u177
   653  000854  2E04               	decfsz	??_LCD_Init& (0+255),f,c
   654  000856  D7FC               	bra	u177
   655  000858  F000               	nop	
   656                           
   657                           ;LCD.c: 72: LCD_CMD(0x03);
   658  00085A  0E03               	movlw	3
   659  00085C  ECF3  F004         	call	_LCD_CMD
   660                           
   661                           ;LCD.c: 73: _delay((unsigned long)((150)*(48000000/4000000.0)));
   662  000860  0E03               	movlw	3
   663  000862  6E04               	movwf	??_LCD_Init& (0+255),c
   664  000864  0E55               	movlw	85
   665  000866                     u187:
   666  000866  2EE8               	decfsz	wreg,f,c
   667  000868  D7FE               	bra	u187
   668  00086A  2E04               	decfsz	??_LCD_Init& (0+255),f,c
   669  00086C  D7FC               	bra	u187
   670  00086E  F000               	nop	
   671                           
   672                           ;LCD.c: 74: LCD_CMD(0x03);
   673  000870  0E03               	movlw	3
   674  000872  ECF3  F004         	call	_LCD_CMD
   675                           
   676                           ;LCD.c: 75: LCD_CMD(0x02);
   677  000876  0E02               	movlw	2
   678  000878  ECF3  F004         	call	_LCD_CMD
   679                           
   680                           ;LCD.c: 76: LCD_CMD(0x02);
   681  00087C  0E02               	movlw	2
   682  00087E  ECF3  F004         	call	_LCD_CMD
   683                           
   684                           ;LCD.c: 77: LCD_CMD(0x08);
   685  000882  0E08               	movlw	8
   686  000884  ECF3  F004         	call	_LCD_CMD
   687                           
   688                           ;LCD.c: 78: LCD_CMD(0x00);
   689  000888  0E00               	movlw	0
   690  00088A  ECF3  F004         	call	_LCD_CMD
   691                           
   692                           ;LCD.c: 79: LCD_CMD(0x0C);
   693  00088E  0E0C               	movlw	12
   694  000890  ECF3  F004         	call	_LCD_CMD
   695                           
   696                           ;LCD.c: 80: LCD_CMD(0x00);
   697  000894  0E00               	movlw	0
   698  000896  ECF3  F004         	call	_LCD_CMD
   699                           
   700                           ;LCD.c: 81: LCD_CMD(0x06);
   701  00089A  0E06               	movlw	6
   702  00089C  ECF3  F004         	call	_LCD_CMD
   703  0008A0  0012               	return		;funcret
   704  0008A2                     __end_of_LCD_Init:
   705                           	opt stack 0
   706                           tblptru	equ	0xFF8
   707                           tblptrh	equ	0xFF7
   708                           tblptrl	equ	0xFF6
   709                           tablat	equ	0xFF5
   710                           wreg	equ	0xFE8
   711                           status	equ	0xFD8
   712                           
   713 ;; *************** function _LCD_Clear *****************
   714 ;; Defined at:
   715 ;;		line 35 in file "LCD.c"
   716 ;; Parameters:    Size  Location     Type
   717 ;;		None
   718 ;; Auto vars:     Size  Location     Type
   719 ;;		None
   720 ;; Return value:  Size  Location     Type
   721 ;;                  1    wreg      void 
   722 ;; Registers used:
   723 ;;		wreg, status,2, cstack
   724 ;; Tracked objects:
   725 ;;		On entry : 0/0
   726 ;;		On exit  : 0/0
   727 ;;		Unchanged: 0/0
   728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   729 ;;      Params:         0       0       0       0       0       0       0       0       0
   730 ;;      Locals:         0       0       0       0       0       0       0       0       0
   731 ;;      Temps:          0       0       0       0       0       0       0       0       0
   732 ;;      Totals:         0       0       0       0       0       0       0       0       0
   733 ;;Total ram usage:        0 bytes
   734 ;; Hardware stack levels used:    1
   735 ;; Hardware stack levels required when called:    2
   736 ;; This function calls:
   737 ;;		_LCD_CMD
   738 ;; This function is called by:
   739 ;;		_main
   740 ;; This function uses a non-reentrant model
   741 ;;
   742                           
   743                           	psect	text5
   744  000A12                     __ptext5:
   745                           	opt stack 0
   746  000A12                     _LCD_Clear:
   747                           	opt stack 28
   748                           
   749                           ;LCD.c: 37: LCD_CMD(0);
   750                           
   751                           ;incstack = 0
   752  000A12  0E00               	movlw	0
   753  000A14  ECF3  F004         	call	_LCD_CMD
   754                           
   755                           ;LCD.c: 38: LCD_CMD(1);
   756  000A18  0E01               	movlw	1
   757  000A1A  ECF3  F004         	call	_LCD_CMD
   758  000A1E  0012               	return		;funcret
   759  000A20                     __end_of_LCD_Clear:
   760                           	opt stack 0
   761                           tblptru	equ	0xFF8
   762                           tblptrh	equ	0xFF7
   763                           tblptrl	equ	0xFF6
   764                           tablat	equ	0xFF5
   765                           wreg	equ	0xFE8
   766                           status	equ	0xFD8
   767                           
   768 ;; *************** function _LCD_CMD *****************
   769 ;; Defined at:
   770 ;;		line 24 in file "LCD.c"
   771 ;; Parameters:    Size  Location     Type
   772 ;;  CMD             1    wreg     unsigned char 
   773 ;; Auto vars:     Size  Location     Type
   774 ;;  CMD             1    2[COMRAM] unsigned char 
   775 ;; Return value:  Size  Location     Type
   776 ;;                  1    wreg      void 
   777 ;; Registers used:
   778 ;;		wreg, status,2, cstack
   779 ;; Tracked objects:
   780 ;;		On entry : 0/0
   781 ;;		On exit  : 0/0
   782 ;;		Unchanged: 0/0
   783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   784 ;;      Params:         0       0       0       0       0       0       0       0       0
   785 ;;      Locals:         1       0       0       0       0       0       0       0       0
   786 ;;      Temps:          1       0       0       0       0       0       0       0       0
   787 ;;      Totals:         2       0       0       0       0       0       0       0       0
   788 ;;Total ram usage:        2 bytes
   789 ;; Hardware stack levels used:    1
   790 ;; Hardware stack levels required when called:    1
   791 ;; This function calls:
   792 ;;		_LCD_DATA
   793 ;; This function is called by:
   794 ;;		_LCD_Clear
   795 ;;		_LCD_Set_Cursor
   796 ;;		_LCD_Init
   797 ;;		_LCD_SL
   798 ;;		_LCD_SR
   799 ;; This function uses a non-reentrant model
   800 ;;
   801                           
   802                           	psect	text6
   803  0009E6                     __ptext6:
   804                           	opt stack 0
   805  0009E6                     _LCD_CMD:
   806                           	opt stack 28
   807                           
   808                           ;incstack = 0
   809                           ;LCD_CMD@CMD stored from wreg
   810  0009E6  6E03               	movwf	LCD_CMD@CMD,c
   811                           
   812                           ;LCD.c: 27: RB5 = 0;
   813  0009E8  9A81               	bcf	3969,5,c	;volatile
   814                           
   815                           ;LCD.c: 29: LCD_DATA(CMD);
   816  0009EA  5003               	movf	LCD_CMD@CMD,w,c
   817  0009EC  ECCD  F004         	call	_LCD_DATA
   818                           
   819                           ;LCD.c: 31: RB4 = 1;
   820  0009F0  8881               	bsf	3969,4,c	;volatile
   821                           
   822                           ;LCD.c: 32: _delay((unsigned long)((500)*(48000000/4000000.0)));
   823  0009F2  0E08               	movlw	8
   824  0009F4  6E02               	movwf	??_LCD_CMD& (0+255),c
   825  0009F6  0ECA               	movlw	202
   826  0009F8                     u197:
   827  0009F8  2EE8               	decfsz	wreg,f,c
   828  0009FA  D7FE               	bra	u197
   829  0009FC  2E02               	decfsz	??_LCD_CMD& (0+255),f,c
   830  0009FE  D7FC               	bra	u197
   831                           
   832                           ;LCD.c: 33: RB4 = 0;
   833  000A00  9881               	bcf	3969,4,c	;volatile
   834  000A02  0012               	return		;funcret
   835  000A04                     __end_of_LCD_CMD:
   836                           	opt stack 0
   837                           tblptru	equ	0xFF8
   838                           tblptrh	equ	0xFF7
   839                           tblptrl	equ	0xFF6
   840                           tablat	equ	0xFF5
   841                           wreg	equ	0xFE8
   842                           status	equ	0xFD8
   843                           
   844 ;; *************** function _LCD_DATA *****************
   845 ;; Defined at:
   846 ;;		line 5 in file "LCD.c"
   847 ;; Parameters:    Size  Location     Type
   848 ;;  Data            1    wreg     unsigned char 
   849 ;; Auto vars:     Size  Location     Type
   850 ;;  Data            1    0[COMRAM] unsigned char 
   851 ;; Return value:  Size  Location     Type
   852 ;;                  1    wreg      void 
   853 ;; Registers used:
   854 ;;		wreg
   855 ;; Tracked objects:
   856 ;;		On entry : 0/0
   857 ;;		On exit  : 0/0
   858 ;;		Unchanged: 0/0
   859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   860 ;;      Params:         0       0       0       0       0       0       0       0       0
   861 ;;      Locals:         1       0       0       0       0       0       0       0       0
   862 ;;      Temps:          0       0       0       0       0       0       0       0       0
   863 ;;      Totals:         1       0       0       0       0       0       0       0       0
   864 ;;Total ram usage:        1 bytes
   865 ;; Hardware stack levels used:    1
   866 ;; This function calls:
   867 ;;		Nothing
   868 ;; This function is called by:
   869 ;;		_LCD_CMD
   870 ;;		_LCD_Init
   871 ;;		_LCD_Write_Char
   872 ;; This function uses a non-reentrant model
   873 ;;
   874                           
   875                           	psect	text7
   876  00099A                     __ptext7:
   877                           	opt stack 0
   878  00099A                     _LCD_DATA:
   879                           	opt stack 28
   880                           
   881                           ;incstack = 0
   882                           ;LCD_DATA@Data stored from wreg
   883  00099A  6E01               	movwf	LCD_DATA@Data,c
   884                           
   885                           ;LCD.c: 7: if(Data & 1)
   886  00099C  A001               	btfss	LCD_DATA@Data,0,c
   887  00099E  D002               	goto	l39
   888                           
   889                           ;LCD.c: 8: RB0 = 1;
   890  0009A0  8081               	bsf	3969,0,c	;volatile
   891  0009A2  D001               	goto	l40
   892  0009A4                     l39:
   893                           
   894                           ;LCD.c: 9: else;LCD.c: 10: RB0 = 0;
   895  0009A4  9081               	bcf	3969,0,c	;volatile
   896  0009A6                     l40:
   897                           
   898                           ;LCD.c: 11: if(Data & 2)
   899  0009A6  A201               	btfss	LCD_DATA@Data,1,c
   900  0009A8  D002               	goto	l41
   901                           
   902                           ;LCD.c: 12: RB1 = 1;
   903  0009AA  8281               	bsf	3969,1,c	;volatile
   904  0009AC  D001               	goto	l42
   905  0009AE                     l41:
   906                           
   907                           ;LCD.c: 13: else;LCD.c: 14: RB1 = 0;
   908  0009AE  9281               	bcf	3969,1,c	;volatile
   909  0009B0                     l42:
   910                           
   911                           ;LCD.c: 15: if(Data & 4)
   912  0009B0  A401               	btfss	LCD_DATA@Data,2,c
   913  0009B2  D002               	goto	l43
   914                           
   915                           ;LCD.c: 16: RB2 = 1;
   916  0009B4  8481               	bsf	3969,2,c	;volatile
   917  0009B6  D001               	goto	l44
   918  0009B8                     l43:
   919                           
   920                           ;LCD.c: 17: else;LCD.c: 18: RB2 = 0;
   921  0009B8  9481               	bcf	3969,2,c	;volatile
   922  0009BA                     l44:
   923                           
   924                           ;LCD.c: 19: if(Data & 8)
   925  0009BA  A601               	btfss	LCD_DATA@Data,3,c
   926  0009BC  D002               	goto	l45
   927                           
   928                           ;LCD.c: 20: RB3 = 1;
   929  0009BE  8681               	bsf	3969,3,c	;volatile
   930  0009C0  0012               	return	
   931  0009C2                     l45:
   932                           
   933                           ;LCD.c: 21: else;LCD.c: 22: RB3 = 0;
   934  0009C2  9681               	bcf	3969,3,c	;volatile
   935  0009C4  0012               	return	
   936  0009C6                     __end_of_LCD_DATA:
   937                           	opt stack 0
   938                           tblptru	equ	0xFF8
   939                           tblptrh	equ	0xFF7
   940                           tblptrl	equ	0xFF6
   941                           tablat	equ	0xFF5
   942                           wreg	equ	0xFE8
   943                           status	equ	0xFD8
   944                           tblptru	equ	0xFF8
   945                           tblptrh	equ	0xFF7
   946                           tblptrl	equ	0xFF6
   947                           tablat	equ	0xFF5
   948                           wreg	equ	0xFE8
   949                           status	equ	0xFD8
   950                           
   951                           	psect	rparam
   952  0000                     tblptru	equ	0xFF8
   953                           tblptrh	equ	0xFF7
   954                           tblptrl	equ	0xFF6
   955                           tablat	equ	0xFF5
   956                           wreg	equ	0xFE8
   957                           status	equ	0xFD8


Data Sizes:
    Strings     13
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     11      11
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    LCD_Write_String@str	PTR unsigned char  size(2) Largest target is 13
		 -> STR_1(CODE[13]), 


Critical Paths under _main in COMRAM

    _main->_LCD_Write_String
    _LCD_Write_String->_LCD_Write_Char
    _LCD_Write_Char->_LCD_DATA
    _LCD_Set_Cursor->_LCD_CMD
    _LCD_Init->_LCD_CMD
    _LCD_Clear->_LCD_CMD
    _LCD_CMD->_LCD_DATA

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     917
                          _LCD_Clear
                           _LCD_Init
                     _LCD_Set_Cursor
                   _LCD_Write_String
 ---------------------------------------------------------------------------------
 (1) _LCD_Write_String                                     6     4      2     286
                                              5 COMRAM     6     4      2
                     _LCD_Write_Char
 ---------------------------------------------------------------------------------
 (2) _LCD_Write_Char                                       4     4      0     120
                                              1 COMRAM     4     4      0
                           _LCD_DATA
 ---------------------------------------------------------------------------------
 (1) _LCD_Set_Cursor                                       5     4      1     421
                                              3 COMRAM     5     4      1
                            _LCD_CMD
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             2     2      0     135
                                              3 COMRAM     2     2      0
                            _LCD_CMD
                           _LCD_DATA
 ---------------------------------------------------------------------------------
 (1) _LCD_Clear                                            0     0      0      75
                            _LCD_CMD
 ---------------------------------------------------------------------------------
 (2) _LCD_CMD                                              2     2      0      75
                                              1 COMRAM     2     2      0
                           _LCD_DATA
 ---------------------------------------------------------------------------------
 (3) _LCD_DATA                                             1     1      0      60
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_Clear
     _LCD_CMD
       _LCD_DATA
   _LCD_Init
     _LCD_CMD
       _LCD_DATA
     _LCD_DATA
   _LCD_Set_Cursor
     _LCD_CMD
       _LCD_DATA
   _LCD_Write_String
     _LCD_Write_Char
       _LCD_DATA

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F      B       B       1       11.6%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
ABS                  0      0       0      20        0.0%
BIGRAM             7FF      0       0      21        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Thu Aug 01 08:50:33 2019

                       l13 09E4                         l40 09A6                         l41 09AE  
                       l42 09B0                         l43 09B8                         l44 09BA  
                       l45 09C2                         l39 09A4                         l56 0928  
                       l67 097A                         l68 095A                __CFG_BORV$3 000000  
             __CFG_CP0$OFF 000000               __CFG_CP1$OFF 000000               __CFG_CP2$OFF 000000  
             __CFG_CP3$OFF 000000               __CFG_CPB$OFF 000000                        _RB0 007C08  
                      _RB1 007C09                        _RB2 007C0A                        _RB3 007C0B  
                      _RB4 007C0C                        _RB5 007C0D                        u117 08C2  
                      u127 08D2                        u137 08E8                        u147 08F8  
                      u157 0828                        u167 083C                        u177 0850  
             __CFG_CPD$OFF 000000                        u187 0866                        u197 09F8  
             __CFG_BOR$OFF 000000                        wreg 000FE8               __CFG_IESO$ON 000000  
          __end_of_LCD_CMD 0A04               __CFG_LVP$OFF 000000             _LCD_Set_Cursor 0902  
             __CFG_WDT$OFF 000000        LCD_Write_String@str 0006                       STR_1 0801  
        ?_LCD_Write_String 0006                       _main 09C6         __size_of_LCD_Clear 000E  
                     start 0000         ??_LCD_Write_String 0008              __CFG_MCLRE$ON 000000  
             ___param_bank 000000           __end_of_LCD_DATA 09C6           __end_of_LCD_Init 08A2  
            __CFG_PLLDIV$2 000000             __CFG_CCP2MX$ON 000000                      ?_main 0001  
            __CFG_USBDIV$1 000000                      _TRISB 000F93              __CFG_PWRT$OFF 000000  
            __CFG_WRT0$OFF 000000              __CFG_WRT1$OFF 000000              __CFG_WRT2$OFF 000000  
            __CFG_WRT3$OFF 000000             __CFG_EBTR0$OFF 000000             __CFG_FCMEN$OFF 000000  
           __CFG_EBTR1$OFF 000000     __end_of_LCD_Set_Cursor 0950             __CFG_EBTR2$OFF 000000  
           __CFG_EBTR3$OFF 000000              __CFG_WRTB$OFF 000000              __CFG_WRTC$OFF 000000  
            __CFG_WRTD$OFF 000000             __CFG_EBTRB$OFF 000000                      tablat 000FF5  
                    status 000FD8             _LCD_Write_Char 08A2            __initialization 0A04  
             __end_of_main 09E6                     ??_main 000C          __end_of_LCD_Clear 0A20  
            __activetblptr 000001                  ??_LCD_CMD 0002            ?_LCD_Set_Cursor 0004  
                   _TRISB4 007C9C                     _TRISB5 007C9D     __end_of_LCD_Write_Char 0902  
           __CFG_XINST$OFF 000000             __CFG_STVREN$ON 000000               __mediumconst 0000  
                   tblptrh 000FF7                     tblptrl 000FF6                     tblptru 000FF8  
          LCD_Set_Cursor@c 0004            LCD_Set_Cursor@r 0005                  ?_LCD_DATA 0001  
               __accesstop 0060    __end_of__initialization 0A04                  ?_LCD_Init 0001  
          __CFG_PBADEN$OFF 000000              ___rparam_used 000001            ?_LCD_Write_Char 0001  
           __pcstackCOMRAM 0001                 ??_LCD_DATA 0001                 ??_LCD_Init 0004  
__size_of_LCD_Write_String 004A                    _LCD_CMD 09E6            __CFG_VREGEN$OFF 000000  
                  __Hparam 0000                    __Lparam 0000               __psmallconst 0800  
                  __pcinit 0A04                    __ramtop 0800           ??_LCD_Set_Cursor 0005  
                  __ptext0 09C6                    __ptext1 0950                    __ptext2 08A2  
                  __ptext3 0902                    __ptext4 0810                    __ptext5 0A12  
                  __ptext6 09E6                    __ptext7 099A                  _LCD_Clear 0A12  
     end_of_initialization 0A04                 LCD_CMD@CMD 0003                 ?_LCD_Clear 0001  
        LCD_Write_String@i 000A           ??_LCD_Write_Char 0002          __size_of_LCD_DATA 002C  
        __size_of_LCD_Init 0092           _LCD_Write_String 0950        start_initialization 0A04  
         __CFG_LPT1OSC$OFF 000000                   ?_LCD_CMD 0001                ??_LCD_Clear 0004  
              __smallconst 0800                   _LCD_DATA 099A                   _LCD_Init 0810  
         __CFG_WDTPS$32768 000000           __size_of_LCD_CMD 001E   __end_of_LCD_Write_String 099A  
                 __Hrparam 0000                   __Lrparam 0000        LCD_Write_Char@High4 0004  
             __Lsmallconst 0800    __size_of_LCD_Set_Cursor 004E              __size_of_main 0020  
      LCD_Set_Cursor@High4 0007      __CFG_CPUDIV$OSC1_PLL2 000000         LCD_Write_Char@Data 0005  
       LCD_Write_Char@Low4 0003    __size_of_LCD_Write_Char 0060         LCD_Set_Cursor@Low4 0006  
       LCD_Set_Cursor@Temp 0008               LCD_DATA@Data 0001         __CFG_FOSC$HSPLL_HS 000000  
