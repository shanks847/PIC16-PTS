

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Wed Aug 20 13:56:52 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2
    12                           	psect	text4,local,class=CODE,merge=1,delta=2
    13                           	psect	text5,local,class=CODE,merge=1,delta=2
    14                           	psect	text6,local,class=CODE,merge=1,delta=2
    15                           	psect	text7,local,class=CODE,merge=1,delta=2
    16                           	psect	text8,local,class=CODE,merge=1,delta=2
    17                           	psect	text9,local,class=CODE,merge=1,delta=2
    18                           	psect	text10,local,class=CODE,merge=1,delta=2
    19                           	psect	text11,local,class=CODE,merge=1,delta=2
    20                           	psect	text12,local,class=CODE,merge=1,delta=2
    21                           	psect	text13,local,class=CODE,merge=1,delta=2
    22                           	dabs	1,0x7E,2
    23  0000                     	;# 
    24  0001                     	;# 
    25  0002                     	;# 
    26  0003                     	;# 
    27  0004                     	;# 
    28  0005                     	;# 
    29  0006                     	;# 
    30  0007                     	;# 
    31  0008                     	;# 
    32  0009                     	;# 
    33  000A                     	;# 
    34  000B                     	;# 
    35  000C                     	;# 
    36  000D                     	;# 
    37  000E                     	;# 
    38  000E                     	;# 
    39  000F                     	;# 
    40  0010                     	;# 
    41  0011                     	;# 
    42  0012                     	;# 
    43  0013                     	;# 
    44  0014                     	;# 
    45  0015                     	;# 
    46  0015                     	;# 
    47  0016                     	;# 
    48  0017                     	;# 
    49  0018                     	;# 
    50  0019                     	;# 
    51  001A                     	;# 
    52  001B                     	;# 
    53  001B                     	;# 
    54  001C                     	;# 
    55  001D                     	;# 
    56  001E                     	;# 
    57  001F                     	;# 
    58  0081                     	;# 
    59  0085                     	;# 
    60  0086                     	;# 
    61  0087                     	;# 
    62  0088                     	;# 
    63  0089                     	;# 
    64  008C                     	;# 
    65  008D                     	;# 
    66  008E                     	;# 
    67  0091                     	;# 
    68  0092                     	;# 
    69  0093                     	;# 
    70  0094                     	;# 
    71  0098                     	;# 
    72  0099                     	;# 
    73  009C                     	;# 
    74  009D                     	;# 
    75  009E                     	;# 
    76  009F                     	;# 
    77  010C                     	;# 
    78  010D                     	;# 
    79  010E                     	;# 
    80  010F                     	;# 
    81  018C                     	;# 
    82  018D                     	;# 
    83  0010                     _T1CON	set	16
    84  000F                     _TMR1H	set	15
    85  000E                     _TMR1L	set	14
    86  0030                     _RB0	set	48
    87  0034                     _RB4	set	52
    88  0042                     _RD2	set	66
    89  0043                     _RD3	set	67
    90  0044                     _RD4	set	68
    91  0045                     _RD5	set	69
    92  0046                     _RD6	set	70
    93  0047                     _RD7	set	71
    94  0080                     _TMR1ON	set	128
    95  0086                     _TRISB	set	134
    96  0088                     _TRISD	set	136
    97                           
    98                           	psect	strings
    99  0003                     __pstrings:	
   100  0003                     stringtab:	
   101  0003                     __stringtab:	
   102  0003                     stringcode:	
   103                           ;	String table - string pointers are 1 byte each
   104                           
   105  0003                     stringdir:	
   106  0003  3000               	movlw	high stringdir
   107  0004  008A               	movwf	10
   108  0005  0804               	movf	4,w
   109  0006  0A84               	incf	4,f
   110  0007  0782               	addwf	2,f
   111  0008                     __stringbase:	
   112  0008  3400               	retlw	0
   113  0009                     __end_of__stringtab:	
   114  0009                     __stringdata:	
   115  0009                     STR_5:	
   116  0009  344F               	retlw	79	;'O'
   117  000A  3475               	retlw	117	;'u'
   118  000B  3474               	retlw	116	;'t'
   119  000C  3420               	retlw	32	;' '
   120  000D  346F               	retlw	111	;'o'
   121  000E  3466               	retlw	102	;'f'
   122  000F  3420               	retlw	32	;' '
   123  0010  3452               	retlw	82	;'R'
   124  0011  3461               	retlw	97	;'a'
   125  0012  346E               	retlw	110	;'n'
   126  0013  3467               	retlw	103	;'g'
   127  0014  3465               	retlw	101	;'e'
   128  0015  3400               	retlw	0
   129  0016                     STR_1:	
   130  0016  3444               	retlw	68	;'D'
   131  0017  3465               	retlw	101	;'e'
   132  0018  3476               	retlw	118	;'v'
   133  0019  3465               	retlw	101	;'e'
   134  001A  346C               	retlw	108	;'l'
   135  001B  346F               	retlw	111	;'o'
   136  001C  3470               	retlw	112	;'p'
   137  001D  3465               	retlw	101	;'e'
   138  001E  3464               	retlw	100	;'d'
   139  001F  3420               	retlw	32	;' '
   140  0020  3442               	retlw	66	;'B'
   141  0021  3479               	retlw	121	;'y'
   142  0022  3400               	retlw	0
   143  0023                     STR_3:	
   144  0023  3444               	retlw	68	;'D'
   145  0024  3469               	retlw	105	;'i'
   146  0025  3473               	retlw	115	;'s'
   147  0026  3474               	retlw	116	;'t'
   148  0027  3461               	retlw	97	;'a'
   149  0028  346E               	retlw	110	;'n'
   150  0029  3463               	retlw	99	;'c'
   151  002A  3465               	retlw	101	;'e'
   152  002B  3420               	retlw	32	;' '
   153  002C  343D               	retlw	61	;'='
   154  002D  3420               	retlw	32	;' '
   155  002E  3400               	retlw	0
   156  002F                     STR_2:	
   157  002F  3465               	retlw	101	;'e'
   158  0030  346C               	retlw	108	;'l'
   159  0031  3465               	retlw	101	;'e'
   160  0032  3463               	retlw	99	;'c'
   161  0033  3474               	retlw	116	;'t'
   162  0034  3472               	retlw	114	;'r'
   163  0035  346F               	retlw	111	;'o'
   164  0036  3453               	retlw	83	;'S'
   165  0037  346F               	retlw	111	;'o'
   166  0038  346D               	retlw	109	;'m'
   167  0039  3465               	retlw	101	;'e'
   168  003A  3400               	retlw	0
   169  003B                     STR_4:	
   170  003B  3463               	retlw	99	;'c'
   171  003C  346D               	retlw	109	;'m'
   172  003D  3400               	retlw	0
   173  003E                     __end_of__stringdata:	
   174                           
   175                           ; #config settings
   176  0000                     
   177                           	psect	cinit
   178  07FC                     start_initialization:	
   179  07FC                     __initialization:	
   180  07FC                     end_of_initialization:	
   181                           ;End of C runtime variable initialization code
   182                           
   183  07FC                     __end_of__initialization:	
   184  07FC  0183               	clrf	3
   185  07FD  120A  118A  2E75   	ljmp	_main	;jump to C main() function
   186                           
   187                           	psect	cstackCOMMON
   188  0070                     __pcstackCOMMON:	
   189  0070                     ?_Lcd_Port:	
   190  0070                     ??_Lcd_Port:	
   191                           ; 0 bytes @ 0x0
   192                           
   193  0070                     ?_Lcd_Cmd:	
   194                           ; 0 bytes @ 0x0
   195                           
   196  0070                     ?_Lcd_Init:	
   197                           ; 0 bytes @ 0x0
   198                           
   199  0070                     ?_Lcd_Write_Char:	
   200                           ; 0 bytes @ 0x0
   201                           
   202  0070                     ?_Lcd_Write_String:	
   203                           ; 0 bytes @ 0x0
   204                           
   205  0070                     ?_main:	
   206                           ; 0 bytes @ 0x0
   207                           
   208  0070                     ?_Lcd_Clear:	
   209                           ; 0 bytes @ 0x0
   210                           
   211  0070                     ?___awdiv:	
   212                           ; 2 bytes @ 0x0
   213                           
   214  0070                     ?___awmod:	
   215                           ; 2 bytes @ 0x0
   216                           
   217  0070                     ?___ftpack:	
   218                           ; 2 bytes @ 0x0
   219                           
   220  0070                     Lcd_Port@a:	
   221                           ; 3 bytes @ 0x0
   222                           
   223  0070                     ___awdiv@divisor:	
   224                           ; 1 bytes @ 0x0
   225                           
   226  0070                     ___awmod@divisor:	
   227                           ; 2 bytes @ 0x0
   228                           
   229  0070                     ___ftpack@arg:	
   230                           ; 2 bytes @ 0x0
   231                           
   232                           
   233                           ; 3 bytes @ 0x0
   234  0070                     	ds	1
   235  0071                     ??_Lcd_Cmd:	
   236  0071                     ??_Lcd_Write_Char:	
   237                           ; 0 bytes @ 0x1
   238                           
   239                           
   240                           ; 0 bytes @ 0x1
   241  0071                     	ds	1
   242  0072                     Lcd_Write_Char@temp:	
   243  0072                     ___awdiv@dividend:	
   244                           ; 1 bytes @ 0x2
   245                           
   246  0072                     ___awmod@dividend:	
   247                           ; 2 bytes @ 0x2
   248                           
   249                           
   250                           ; 2 bytes @ 0x2
   251  0072                     	ds	1
   252  0073                     Lcd_Cmd@a:	
   253  0073                     Lcd_Write_Char@y:	
   254                           ; 1 bytes @ 0x3
   255                           
   256  0073                     ___ftpack@exp:	
   257                           ; 1 bytes @ 0x3
   258                           
   259                           
   260                           ; 1 bytes @ 0x3
   261  0073                     	ds	1
   262  0074                     ??_Lcd_Clear:	
   263  0074                     ?_Lcd_Set_Cursor:	
   264                           ; 0 bytes @ 0x4
   265                           
   266  0074                     ??_Lcd_Init:	
   267                           ; 0 bytes @ 0x4
   268                           
   269  0074                     ??___awdiv:	
   270                           ; 0 bytes @ 0x4
   271                           
   272  0074                     ??___awmod:	
   273                           ; 0 bytes @ 0x4
   274                           
   275  0074                     Lcd_Set_Cursor@b:	
   276                           ; 0 bytes @ 0x4
   277                           
   278  0074                     Lcd_Write_Char@a:	
   279                           ; 1 bytes @ 0x4
   280                           
   281  0074                     ___ftpack@sign:	
   282                           ; 1 bytes @ 0x4
   283                           
   284                           
   285                           ; 1 bytes @ 0x4
   286  0074                     	ds	1
   287  0075                     ??___ftpack:	
   288  0075                     ??_Lcd_Set_Cursor:	
   289                           ; 0 bytes @ 0x5
   290                           
   291  0075                     ??_Lcd_Write_String:	
   292                           ; 0 bytes @ 0x5
   293                           
   294  0075                     ___awdiv@counter:	
   295                           ; 0 bytes @ 0x5
   296                           
   297  0075                     ___awmod@counter:	
   298                           ; 1 bytes @ 0x5
   299                           
   300  0075                     Lcd_Write_String@i:	
   301                           ; 1 bytes @ 0x5
   302                           
   303                           
   304                           ; 2 bytes @ 0x5
   305  0075                     	ds	1
   306  0076                     ___awdiv@sign:	
   307  0076                     ___awmod@sign:	
   308                           ; 1 bytes @ 0x6
   309                           
   310                           
   311                           ; 1 bytes @ 0x6
   312  0076                     	ds	1
   313  0077                     Lcd_Set_Cursor@a:	
   314  0077                     Lcd_Write_String@a:	
   315                           ; 1 bytes @ 0x7
   316                           
   317  0077                     ___awdiv@quotient:	
   318                           ; 1 bytes @ 0x7
   319                           
   320                           
   321                           ; 2 bytes @ 0x7
   322  0077                     	ds	1
   323  0078                     ?___awtoft:	
   324  0078                     Lcd_Set_Cursor@z:	
   325                           ; 3 bytes @ 0x8
   326                           
   327  0078                     ___awtoft@c:	
   328                           ; 1 bytes @ 0x8
   329                           
   330                           
   331                           ; 2 bytes @ 0x8
   332  0078                     	ds	1
   333  0079                     Lcd_Set_Cursor@y:	
   334                           
   335                           ; 1 bytes @ 0x9
   336  0079                     	ds	1
   337  007A                     Lcd_Set_Cursor@temp:	
   338                           
   339                           ; 1 bytes @ 0xA
   340  007A                     	ds	1
   341  007B                     ??___awtoft:	
   342                           
   343                           ; 0 bytes @ 0xB
   344  007B                     	ds	2
   345  007D                     ___awtoft@sign:	
   346                           
   347                           ; 1 bytes @ 0xD
   348  007D                     	ds	1
   349                           
   350                           	psect	cstackBANK0
   351  0020                     __pcstackBANK0:	
   352  0020                     ?___ftdiv:	
   353  0020                     ___ftdiv@f2:	
   354                           ; 3 bytes @ 0x0
   355                           
   356                           
   357                           ; 3 bytes @ 0x0
   358  0020                     	ds	3
   359  0023                     ___ftdiv@f1:	
   360                           
   361                           ; 3 bytes @ 0x3
   362  0023                     	ds	3
   363  0026                     ??___ftdiv:	
   364                           
   365                           ; 0 bytes @ 0x6
   366  0026                     	ds	4
   367  002A                     ___ftdiv@cntr:	
   368                           
   369                           ; 1 bytes @ 0xA
   370  002A                     	ds	1
   371  002B                     ___ftdiv@f3:	
   372                           
   373                           ; 3 bytes @ 0xB
   374  002B                     	ds	3
   375  002E                     ___ftdiv@exp:	
   376                           
   377                           ; 1 bytes @ 0xE
   378  002E                     	ds	1
   379  002F                     ___ftdiv@sign:	
   380                           
   381                           ; 1 bytes @ 0xF
   382  002F                     	ds	1
   383  0030                     ?___fttol:	
   384  0030                     ___fttol@f1:	
   385                           ; 4 bytes @ 0x10
   386                           
   387                           
   388                           ; 3 bytes @ 0x10
   389  0030                     	ds	4
   390  0034                     ??___fttol:	
   391                           
   392                           ; 0 bytes @ 0x14
   393  0034                     	ds	4
   394  0038                     ___fttol@sign1:	
   395                           
   396                           ; 1 bytes @ 0x18
   397  0038                     	ds	1
   398  0039                     ___fttol@lval:	
   399                           
   400                           ; 4 bytes @ 0x19
   401  0039                     	ds	4
   402  003D                     ___fttol@exp1:	
   403                           
   404                           ; 1 bytes @ 0x1D
   405  003D                     	ds	1
   406  003E                     ??_main:	
   407                           
   408                           ; 0 bytes @ 0x1E
   409  003E                     	ds	3
   410  0041                     main@a:	
   411                           
   412                           ; 2 bytes @ 0x21
   413  0041                     	ds	2
   414                           
   415                           	psect	maintext
   416  0675                     __pmaintext:	
   417 ;;
   418 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   419 ;;
   420 ;; *************** function _main *****************
   421 ;; Defined at:
   422 ;;		line 24 in file "main.c"
   423 ;; Parameters:    Size  Location     Type
   424 ;;		None
   425 ;; Auto vars:     Size  Location     Type
   426 ;;  a               2   33[BANK0 ] int 
   427 ;; Return value:  Size  Location     Type
   428 ;;		None               void
   429 ;; Registers used:
   430 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   431 ;; Tracked objects:
   432 ;;		On entry : 17F/0
   433 ;;		On exit  : 0/0
   434 ;;		Unchanged: 0/0
   435 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   436 ;;      Params:         0       0       0       0       0
   437 ;;      Locals:         0       2       0       0       0
   438 ;;      Temps:          0       3       0       0       0
   439 ;;      Totals:         0       5       0       0       0
   440 ;;Total ram usage:        5 bytes
   441 ;; Hardware stack levels required when called:    3
   442 ;; This function calls:
   443 ;;		_Lcd_Clear
   444 ;;		_Lcd_Init
   445 ;;		_Lcd_Set_Cursor
   446 ;;		_Lcd_Write_Char
   447 ;;		_Lcd_Write_String
   448 ;;		___awdiv
   449 ;;		___awmod
   450 ;;		___awtoft
   451 ;;		___ftdiv
   452 ;;		___fttol
   453 ;; This function is called by:
   454 ;;		Startup code after reset
   455 ;; This function uses a non-reentrant model
   456 ;;
   457                           
   458                           
   459                           ;psect for function _main
   460  0675                     _main:	
   461                           
   462                           ;main.c: 26: int a;
   463                           ;main.c: 28: TRISB = 0b00010000;
   464                           
   465                           ;incstack = 0
   466                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   467  0675  3010               	movlw	16
   468  0676  1683               	bsf	3,5	;RP0=1, select bank1
   469  0677  1303               	bcf	3,6	;RP1=0, select bank1
   470  0678  0086               	movwf	6	;volatile
   471                           
   472                           ;main.c: 29: TRISD = 0x00;
   473  0679  0188               	clrf	8	;volatile
   474                           
   475                           ;main.c: 31: Lcd_Init();
   476  067A  120A  118A  2411  120A  118A  	fcall	_Lcd_Init
   477                           
   478                           ;main.c: 33: Lcd_Set_Cursor(1,1);
   479  067F  01F4               	clrf	Lcd_Set_Cursor@b
   480  0680  0AF4               	incf	Lcd_Set_Cursor@b,f
   481  0681  3001               	movlw	1
   482  0682  120A  118A  2379  120A  118A  	fcall	_Lcd_Set_Cursor
   483                           
   484                           ;main.c: 34: Lcd_Write_String("Developed By");
   485  0687  300E               	movlw	(STR_1-__stringbase)& (0+255)
   486  0688  120A  118A  231E  120A  118A  	fcall	_Lcd_Write_String
   487                           
   488                           ;main.c: 35: Lcd_Set_Cursor(2,1);
   489  068D  01F4               	clrf	Lcd_Set_Cursor@b
   490  068E  0AF4               	incf	Lcd_Set_Cursor@b,f
   491  068F  3002               	movlw	2
   492  0690  120A  118A  2379  120A  118A  	fcall	_Lcd_Set_Cursor
   493                           
   494                           ;main.c: 36: Lcd_Write_String("electroSome");
   495  0695  3027               	movlw	(STR_2-__stringbase)& (0+255)
   496  0696  120A  118A  231E  120A  118A  	fcall	_Lcd_Write_String
   497                           
   498                           ;main.c: 38: _delay((unsigned long)((3000)*(8000000/4000.0)));
   499  069B  301F               	movlw	31
   500  069C  1283               	bcf	3,5	;RP0=0, select bank0
   501  069D  1303               	bcf	3,6	;RP1=0, select bank0
   502  069E  00C0               	movwf	??_main+2
   503  069F  3071               	movlw	113
   504  06A0  00BF               	movwf	??_main+1
   505  06A1  303B               	movlw	59
   506  06A2  00BE               	movwf	??_main
   507  06A3                     u1277:	
   508  06A3  0BBE               	decfsz	??_main,f
   509  06A4  2EA3               	goto	u1277
   510  06A5  0BBF               	decfsz	??_main+1,f
   511  06A6  2EA3               	goto	u1277
   512  06A7  0BC0               	decfsz	??_main+2,f
   513  06A8  2EA3               	goto	u1277
   514  06A9  0000               	nop
   515                           
   516                           ;main.c: 39: Lcd_Clear();
   517  06AA  120A  118A  22BE  120A  118A  	fcall	_Lcd_Clear
   518                           
   519                           ;main.c: 41: T1CON = 0x10;
   520  06AF  3010               	movlw	16
   521  06B0  1283               	bcf	3,5	;RP0=0, select bank0
   522  06B1  1303               	bcf	3,6	;RP1=0, select bank0
   523  06B2  0090               	movwf	16	;volatile
   524  06B3                     l1218:	
   525                           ;main.c: 43: while(1)
   526                           
   527                           
   528                           ;main.c: 44: {
   529                           ;main.c: 45: TMR1H = 0;
   530  06B3  1283               	bcf	3,5	;RP0=0, select bank0
   531  06B4  1303               	bcf	3,6	;RP1=0, select bank0
   532  06B5  018F               	clrf	15	;volatile
   533                           
   534                           ;main.c: 46: TMR1L = 0;
   535  06B6  018E               	clrf	14	;volatile
   536                           
   537                           ;main.c: 48: RB0 = 1;
   538  06B7  1406               	bsf	6,0	;volatile
   539                           
   540                           ;main.c: 49: _delay((unsigned long)((10)*(8000000/4000000.0)));
   541  06B8  3006               	movlw	6
   542  06B9  00BE               	movwf	??_main
   543  06BA                     u1287:	
   544  06BA  0BBE               	decfsz	??_main,f
   545  06BB  2EBA               	goto	u1287
   546  06BC  0000               	nop
   547                           
   548                           ;main.c: 50: RB0 = 0;
   549  06BD  1283               	bcf	3,5	;RP0=0, select bank0
   550  06BE  1303               	bcf	3,6	;RP1=0, select bank0
   551  06BF  1006               	bcf	6,0	;volatile
   552  06C0                     l75:	
   553                           ;main.c: 52: while(!RB4);
   554                           
   555  06C0  1E06               	btfss	6,4	;volatile
   556  06C1  2EC0               	goto	l75
   557                           
   558                           ;main.c: 53: TMR1ON = 1;
   559  06C2  1410               	bsf	16,0	;volatile
   560  06C3                     l78:	
   561                           ;main.c: 54: while(RB4);
   562                           
   563  06C3  1A06               	btfsc	6,4	;volatile
   564  06C4  2EC3               	goto	l78
   565                           
   566                           ;main.c: 55: TMR1ON = 0;
   567  06C5  1010               	bcf	16,0	;volatile
   568                           
   569                           ;main.c: 57: a = (TMR1L | (TMR1H<<8));
   570  06C6  080F               	movf	15,w	;volatile
   571  06C7  01C2               	clrf	main@a+1
   572  06C8  07C2               	addwf	main@a+1,f
   573  06C9  080E               	movf	14,w	;volatile
   574  06CA  01C1               	clrf	main@a
   575  06CB  07C1               	addwf	main@a,f
   576                           
   577                           ;main.c: 58: a = a/58.82;
   578  06CC  0842               	movf	main@a+1,w
   579  06CD  01F9               	clrf	___awtoft@c+1
   580  06CE  07F9               	addwf	___awtoft@c+1,f
   581  06CF  0841               	movf	main@a,w
   582  06D0  01F8               	clrf	___awtoft@c
   583  06D1  07F8               	addwf	___awtoft@c,f
   584  06D2  120A  118A  22FD  120A  118A  	fcall	___awtoft
   585  06D7  0878               	movf	?___awtoft,w
   586  06D8  1283               	bcf	3,5	;RP0=0, select bank0
   587  06D9  1303               	bcf	3,6	;RP1=0, select bank0
   588  06DA  00A3               	movwf	___ftdiv@f1
   589  06DB  0879               	movf	?___awtoft+1,w
   590  06DC  00A4               	movwf	___ftdiv@f1+1
   591  06DD  087A               	movf	?___awtoft+2,w
   592  06DE  00A5               	movwf	___ftdiv@f1+2
   593  06DF  3048               	movlw	72
   594  06E0  00A0               	movwf	___ftdiv@f2
   595  06E1  306B               	movlw	107
   596  06E2  00A1               	movwf	___ftdiv@f2+1
   597  06E3  3042               	movlw	66
   598  06E4  00A2               	movwf	___ftdiv@f2+2
   599  06E5  120A  118A  25BD  120A  118A  	fcall	___ftdiv
   600  06EA  1283               	bcf	3,5	;RP0=0, select bank0
   601  06EB  1303               	bcf	3,6	;RP1=0, select bank0
   602  06EC  0820               	movf	?___ftdiv,w
   603  06ED  00B0               	movwf	___fttol@f1
   604  06EE  0821               	movf	?___ftdiv+1,w
   605  06EF  00B1               	movwf	___fttol@f1+1
   606  06F0  0822               	movf	?___ftdiv+2,w
   607  06F1  00B2               	movwf	___fttol@f1+2
   608  06F2  120A  118A  252F  120A  118A  	fcall	___fttol
   609  06F7  1283               	bcf	3,5	;RP0=0, select bank0
   610  06F8  1303               	bcf	3,6	;RP1=0, select bank0
   611  06F9  0831               	movf	?___fttol+1,w
   612  06FA  01C2               	clrf	main@a+1
   613  06FB  07C2               	addwf	main@a+1,f
   614  06FC  0830               	movf	?___fttol,w
   615  06FD  01C1               	clrf	main@a
   616  06FE  07C1               	addwf	main@a,f
   617                           
   618                           ;main.c: 59: a = a + 1;
   619  06FF  0841               	movf	main@a,w
   620  0700  3E01               	addlw	1
   621  0701  00C1               	movwf	main@a
   622  0702  0842               	movf	main@a+1,w
   623  0703  1803               	skipnc
   624  0704  3E01               	addlw	1
   625  0705  3E00               	addlw	0
   626  0706  00C2               	movwf	main@a+1
   627                           
   628                           ;main.c: 61: if(a>=2 && a<=400)
   629  0707  0842               	movf	main@a+1,w
   630  0708  3A80               	xorlw	128
   631  0709  00FF               	movwf	127
   632  070A  3080               	movlw	128
   633  070B  027F               	subwf	127,w
   634  070C  1D03               	skipz
   635  070D  2F10               	goto	u1255
   636  070E  3002               	movlw	2
   637  070F  0241               	subwf	main@a,w
   638  0710                     u1255:	
   639  0710  1C03               	skipc
   640  0711  2FDA               	goto	l1260
   641  0712  1283               	bcf	3,5	;RP0=0, select bank0
   642  0713  1303               	bcf	3,6	;RP1=0, select bank0
   643  0714  0842               	movf	main@a+1,w
   644  0715  3A80               	xorlw	128
   645  0716  00FF               	movwf	127
   646  0717  3081               	movlw	129
   647  0718  027F               	subwf	127,w
   648  0719  1D03               	skipz
   649  071A  2F1D               	goto	u1265
   650  071B  3091               	movlw	145
   651  071C  0241               	subwf	main@a,w
   652  071D                     u1265:	
   653  071D  1803               	skipnc
   654  071E  2FDA               	goto	l1260
   655                           
   656                           ;main.c: 62: {
   657                           ;main.c: 63: Lcd_Clear();
   658  071F  120A  118A  22BE  120A  118A  	fcall	_Lcd_Clear
   659                           
   660                           ;main.c: 64: Lcd_Set_Cursor(1,1);
   661  0724  01F4               	clrf	Lcd_Set_Cursor@b
   662  0725  0AF4               	incf	Lcd_Set_Cursor@b,f
   663  0726  3001               	movlw	1
   664  0727  120A  118A  2379  120A  118A  	fcall	_Lcd_Set_Cursor
   665                           
   666                           ;main.c: 65: Lcd_Write_String("Distance = ");
   667  072C  301B               	movlw	(STR_3-__stringbase)& (0+255)
   668  072D  120A  118A  231E  120A  118A  	fcall	_Lcd_Write_String
   669                           
   670                           ;main.c: 67: Lcd_Set_Cursor(1,14);
   671  0732  300E               	movlw	14
   672  0733  1283               	bcf	3,5	;RP0=0, select bank0
   673  0734  1303               	bcf	3,6	;RP1=0, select bank0
   674  0735  00BE               	movwf	??_main
   675  0736  083E               	movf	??_main,w
   676  0737  00F4               	movwf	Lcd_Set_Cursor@b
   677  0738  3001               	movlw	1
   678  0739  120A  118A  2379  120A  118A  	fcall	_Lcd_Set_Cursor
   679                           
   680                           ;main.c: 68: Lcd_Write_Char(a%10 + 48);
   681  073E  300A               	movlw	10
   682  073F  00F0               	movwf	___awmod@divisor
   683  0740  3000               	movlw	0
   684  0741  00F1               	movwf	___awmod@divisor+1
   685  0742  1283               	bcf	3,5	;RP0=0, select bank0
   686  0743  1303               	bcf	3,6	;RP1=0, select bank0
   687  0744  0842               	movf	main@a+1,w
   688  0745  01F3               	clrf	___awmod@dividend+1
   689  0746  07F3               	addwf	___awmod@dividend+1,f
   690  0747  0841               	movf	main@a,w
   691  0748  01F2               	clrf	___awmod@dividend
   692  0749  07F2               	addwf	___awmod@dividend,f
   693  074A  120A  118A  23C4  120A  118A  	fcall	___awmod
   694  074F  0870               	movf	?___awmod,w
   695  0750  3E30               	addlw	48
   696  0751  120A  118A  2340  120A  118A  	fcall	_Lcd_Write_Char
   697                           
   698                           ;main.c: 70: a = a/10;
   699  0756  300A               	movlw	10
   700  0757  00F0               	movwf	___awdiv@divisor
   701  0758  3000               	movlw	0
   702  0759  00F1               	movwf	___awdiv@divisor+1
   703  075A  1283               	bcf	3,5	;RP0=0, select bank0
   704  075B  1303               	bcf	3,6	;RP1=0, select bank0
   705  075C  0842               	movf	main@a+1,w
   706  075D  01F3               	clrf	___awdiv@dividend+1
   707  075E  07F3               	addwf	___awdiv@dividend+1,f
   708  075F  0841               	movf	main@a,w
   709  0760  01F2               	clrf	___awdiv@dividend
   710  0761  07F2               	addwf	___awdiv@dividend,f
   711  0762  120A  118A  246C  120A  118A  	fcall	___awdiv
   712  0767  0871               	movf	?___awdiv+1,w
   713  0768  1283               	bcf	3,5	;RP0=0, select bank0
   714  0769  1303               	bcf	3,6	;RP1=0, select bank0
   715  076A  01C2               	clrf	main@a+1
   716  076B  07C2               	addwf	main@a+1,f
   717  076C  0870               	movf	?___awdiv,w
   718  076D  01C1               	clrf	main@a
   719  076E  07C1               	addwf	main@a,f
   720                           
   721                           ;main.c: 71: Lcd_Set_Cursor(1,13);
   722  076F  300D               	movlw	13
   723  0770  00BE               	movwf	??_main
   724  0771  083E               	movf	??_main,w
   725  0772  00F4               	movwf	Lcd_Set_Cursor@b
   726  0773  3001               	movlw	1
   727  0774  120A  118A  2379  120A  118A  	fcall	_Lcd_Set_Cursor
   728                           
   729                           ;main.c: 72: Lcd_Write_Char(a%10 + 48);
   730  0779  300A               	movlw	10
   731  077A  00F0               	movwf	___awmod@divisor
   732  077B  3000               	movlw	0
   733  077C  00F1               	movwf	___awmod@divisor+1
   734  077D  1283               	bcf	3,5	;RP0=0, select bank0
   735  077E  1303               	bcf	3,6	;RP1=0, select bank0
   736  077F  0842               	movf	main@a+1,w
   737  0780  01F3               	clrf	___awmod@dividend+1
   738  0781  07F3               	addwf	___awmod@dividend+1,f
   739  0782  0841               	movf	main@a,w
   740  0783  01F2               	clrf	___awmod@dividend
   741  0784  07F2               	addwf	___awmod@dividend,f
   742  0785  120A  118A  23C4  120A  118A  	fcall	___awmod
   743  078A  0870               	movf	?___awmod,w
   744  078B  3E30               	addlw	48
   745  078C  120A  118A  2340  120A  118A  	fcall	_Lcd_Write_Char
   746                           
   747                           ;main.c: 74: a = a/10;
   748  0791  300A               	movlw	10
   749  0792  00F0               	movwf	___awdiv@divisor
   750  0793  3000               	movlw	0
   751  0794  00F1               	movwf	___awdiv@divisor+1
   752  0795  1283               	bcf	3,5	;RP0=0, select bank0
   753  0796  1303               	bcf	3,6	;RP1=0, select bank0
   754  0797  0842               	movf	main@a+1,w
   755  0798  01F3               	clrf	___awdiv@dividend+1
   756  0799  07F3               	addwf	___awdiv@dividend+1,f
   757  079A  0841               	movf	main@a,w
   758  079B  01F2               	clrf	___awdiv@dividend
   759  079C  07F2               	addwf	___awdiv@dividend,f
   760  079D  120A  118A  246C  120A  118A  	fcall	___awdiv
   761  07A2  0871               	movf	?___awdiv+1,w
   762  07A3  1283               	bcf	3,5	;RP0=0, select bank0
   763  07A4  1303               	bcf	3,6	;RP1=0, select bank0
   764  07A5  01C2               	clrf	main@a+1
   765  07A6  07C2               	addwf	main@a+1,f
   766  07A7  0870               	movf	?___awdiv,w
   767  07A8  01C1               	clrf	main@a
   768  07A9  07C1               	addwf	main@a,f
   769                           
   770                           ;main.c: 75: Lcd_Set_Cursor(1,12);
   771  07AA  300C               	movlw	12
   772  07AB  00BE               	movwf	??_main
   773  07AC  083E               	movf	??_main,w
   774  07AD  00F4               	movwf	Lcd_Set_Cursor@b
   775  07AE  3001               	movlw	1
   776  07AF  120A  118A  2379  120A  118A  	fcall	_Lcd_Set_Cursor
   777                           
   778                           ;main.c: 76: Lcd_Write_Char(a%10 + 48);
   779  07B4  300A               	movlw	10
   780  07B5  00F0               	movwf	___awmod@divisor
   781  07B6  3000               	movlw	0
   782  07B7  00F1               	movwf	___awmod@divisor+1
   783  07B8  1283               	bcf	3,5	;RP0=0, select bank0
   784  07B9  1303               	bcf	3,6	;RP1=0, select bank0
   785  07BA  0842               	movf	main@a+1,w
   786  07BB  01F3               	clrf	___awmod@dividend+1
   787  07BC  07F3               	addwf	___awmod@dividend+1,f
   788  07BD  0841               	movf	main@a,w
   789  07BE  01F2               	clrf	___awmod@dividend
   790  07BF  07F2               	addwf	___awmod@dividend,f
   791  07C0  120A  118A  23C4  120A  118A  	fcall	___awmod
   792  07C5  0870               	movf	?___awmod,w
   793  07C6  3E30               	addlw	48
   794  07C7  120A  118A  2340  120A  118A  	fcall	_Lcd_Write_Char
   795                           
   796                           ;main.c: 78: Lcd_Set_Cursor(1,15);
   797  07CC  300F               	movlw	15
   798  07CD  1283               	bcf	3,5	;RP0=0, select bank0
   799  07CE  1303               	bcf	3,6	;RP1=0, select bank0
   800  07CF  00BE               	movwf	??_main
   801  07D0  083E               	movf	??_main,w
   802  07D1  00F4               	movwf	Lcd_Set_Cursor@b
   803  07D2  3001               	movlw	1
   804  07D3  120A  118A  2379  120A  118A  	fcall	_Lcd_Set_Cursor
   805                           
   806                           ;main.c: 79: Lcd_Write_String("cm");
   807  07D8  3033               	movlw	(STR_4-__stringbase)& (0+255)
   808  07D9  2FE8               	goto	L1
   809  07DA                     l1260:	
   810                           ;main.c: 80: }
   811                           
   812                           
   813                           ;main.c: 81: else
   814                           ;main.c: 82: {
   815                           ;main.c: 83: Lcd_Clear();
   816  07DA  120A  118A  22BE  120A  118A  	fcall	_Lcd_Clear
   817                           
   818                           ;main.c: 84: Lcd_Set_Cursor(1,1);
   819  07DF  01F4               	clrf	Lcd_Set_Cursor@b
   820  07E0  0AF4               	incf	Lcd_Set_Cursor@b,f
   821  07E1  3001               	movlw	1
   822  07E2  120A  118A  2379  120A  118A  	fcall	_Lcd_Set_Cursor
   823                           
   824                           ;main.c: 85: Lcd_Write_String("Out of Range");
   825  07E7  3001               	movlw	(STR_5-__stringbase)& (0+255)
   826  07E8                     L1:	
   827  07E8  120A  118A  231E  120A  118A  	fcall	_Lcd_Write_String
   828                           
   829                           ;main.c: 86: }
   830                           ;main.c: 87: _delay((unsigned long)((400)*(8000000/4000.0)));
   831  07ED  3005               	movlw	5
   832  07EE  1283               	bcf	3,5	;RP0=0, select bank0
   833  07EF  1303               	bcf	3,6	;RP1=0, select bank0
   834  07F0  00C0               	movwf	??_main+2
   835  07F1  300F               	movlw	15
   836  07F2  00BF               	movwf	??_main+1
   837  07F3  30F4               	movlw	244
   838  07F4  00BE               	movwf	??_main
   839  07F5                     u1297:	
   840  07F5  0BBE               	decfsz	??_main,f
   841  07F6  2FF5               	goto	u1297
   842  07F7  0BBF               	decfsz	??_main+1,f
   843  07F8  2FF5               	goto	u1297
   844  07F9  0BC0               	decfsz	??_main+2,f
   845  07FA  2FF5               	goto	u1297
   846  07FB  2EB3               	goto	l1218
   847  07FC                     __end_of_main:	
   848                           
   849                           	psect	text1
   850  052F                     __ptext1:	
   851 ;; *************** function ___fttol *****************
   852 ;; Defined at:
   853 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
   854 ;; Parameters:    Size  Location     Type
   855 ;;  f1              3   16[BANK0 ] float 
   856 ;; Auto vars:     Size  Location     Type
   857 ;;  lval            4   25[BANK0 ] unsigned long 
   858 ;;  exp1            1   29[BANK0 ] unsigned char 
   859 ;;  sign1           1   24[BANK0 ] unsigned char 
   860 ;; Return value:  Size  Location     Type
   861 ;;                  4   16[BANK0 ] long 
   862 ;; Registers used:
   863 ;;		wreg, status,2, status,0
   864 ;; Tracked objects:
   865 ;;		On entry : 0/0
   866 ;;		On exit  : 0/0
   867 ;;		Unchanged: 0/0
   868 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   869 ;;      Params:         0       4       0       0       0
   870 ;;      Locals:         0       6       0       0       0
   871 ;;      Temps:          0       4       0       0       0
   872 ;;      Totals:         0      14       0       0       0
   873 ;;Total ram usage:       14 bytes
   874 ;; Hardware stack levels used:    1
   875 ;; This function calls:
   876 ;;		Nothing
   877 ;; This function is called by:
   878 ;;		_main
   879 ;; This function uses a non-reentrant model
   880 ;;
   881                           
   882                           
   883                           ;psect for function ___fttol
   884  052F                     ___fttol:	
   885                           
   886                           ;incstack = 0
   887                           ; Regs used in ___fttol: [wreg+status,2+status,0]
   888  052F  1283               	bcf	3,5	;RP0=0, select bank0
   889  0530  1303               	bcf	3,6	;RP1=0, select bank0
   890  0531  0830               	movf	___fttol@f1,w
   891  0532  00B4               	movwf	??___fttol
   892  0533  0831               	movf	___fttol@f1+1,w
   893  0534  00B5               	movwf	??___fttol+1
   894  0535  0832               	movf	___fttol@f1+2,w
   895  0536  00B6               	movwf	??___fttol+2
   896  0537  1003               	clrc
   897  0538  0D35               	rlf	??___fttol+1,w
   898  0539  0D36               	rlf	??___fttol+2,w
   899  053A  00B7               	movwf	??___fttol+3
   900  053B  0837               	movf	??___fttol+3,w
   901  053C  00BD               	movwf	___fttol@exp1
   902  053D  08BD               	movf	___fttol@exp1,f
   903  053E  1D03               	skipz
   904  053F  2D49               	goto	l1156
   905  0540  3000               	movlw	0
   906  0541  00B3               	movwf	?___fttol+3
   907  0542  3000               	movlw	0
   908  0543  00B2               	movwf	?___fttol+2
   909  0544  3000               	movlw	0
   910  0545  00B1               	movwf	?___fttol+1
   911  0546  3000               	movlw	0
   912  0547  00B0               	movwf	?___fttol
   913  0548  0008               	return
   914  0549                     l1156:	
   915  0549  0830               	movf	___fttol@f1,w
   916  054A  00B4               	movwf	??___fttol
   917  054B  0831               	movf	___fttol@f1+1,w
   918  054C  00B5               	movwf	??___fttol+1
   919  054D  0832               	movf	___fttol@f1+2,w
   920  054E  00B6               	movwf	??___fttol+2
   921  054F  3017               	movlw	23
   922  0550                     u1145:	
   923  0550  1003               	clrc
   924  0551  0CB6               	rrf	??___fttol+2,f
   925  0552  0CB5               	rrf	??___fttol+1,f
   926  0553  0CB4               	rrf	??___fttol,f
   927  0554  3EFF               	addlw	-1
   928  0555  1D03               	skipz
   929  0556  2D50               	goto	u1145
   930  0557  0834               	movf	??___fttol,w
   931  0558  00B7               	movwf	??___fttol+3
   932  0559  0837               	movf	??___fttol+3,w
   933  055A  00B8               	movwf	___fttol@sign1
   934  055B  17B1               	bsf	___fttol@f1+1,7
   935  055C  30FF               	movlw	255
   936  055D  05B0               	andwf	___fttol@f1,f
   937  055E  30FF               	movlw	255
   938  055F  05B1               	andwf	___fttol@f1+1,f
   939  0560  3000               	movlw	0
   940  0561  05B2               	andwf	___fttol@f1+2,f
   941  0562  0830               	movf	___fttol@f1,w
   942  0563  00B9               	movwf	___fttol@lval
   943  0564  0831               	movf	___fttol@f1+1,w
   944  0565  00BA               	movwf	___fttol@lval+1
   945  0566  0832               	movf	___fttol@f1+2,w
   946  0567  00BB               	movwf	___fttol@lval+2
   947  0568  01BC               	clrf	___fttol@lval+3
   948  0569  308E               	movlw	142
   949  056A  02BD               	subwf	___fttol@exp1,f
   950  056B  1FBD               	btfss	___fttol@exp1,7
   951  056C  2D8B               	goto	l1176
   952  056D  083D               	movf	___fttol@exp1,w
   953  056E  3A80               	xorlw	128
   954  056F  3E8F               	addlw	143
   955  0570  1803               	skipnc
   956  0571  2D7B               	goto	l1174
   957  0572  3000               	movlw	0
   958  0573  00B3               	movwf	?___fttol+3
   959  0574  3000               	movlw	0
   960  0575  00B2               	movwf	?___fttol+2
   961  0576  3000               	movlw	0
   962  0577  00B1               	movwf	?___fttol+1
   963  0578  3000               	movlw	0
   964  0579  00B0               	movwf	?___fttol
   965  057A  0008               	return
   966  057B                     l1174:	
   967  057B  3001               	movlw	1
   968  057C                     u1175:	
   969  057C  1003               	clrc
   970  057D  0CBC               	rrf	___fttol@lval+3,f
   971  057E  0CBB               	rrf	___fttol@lval+2,f
   972  057F  0CBA               	rrf	___fttol@lval+1,f
   973  0580  0CB9               	rrf	___fttol@lval,f
   974  0581  3EFF               	addlw	-1
   975  0582  1D03               	skipz
   976  0583  2D7C               	goto	u1175
   977  0584  3001               	movlw	1
   978  0585  00B4               	movwf	??___fttol
   979  0586  0834               	movf	??___fttol,w
   980  0587  07BD               	addwf	___fttol@exp1,f
   981  0588  1903               	btfsc	3,2
   982  0589  2DA6               	goto	l1186
   983  058A  2D7B               	goto	l1174
   984  058B                     l1176:	
   985  058B  3018               	movlw	24
   986  058C  023D               	subwf	___fttol@exp1,w
   987  058D  1C03               	skipc
   988  058E  2DA3               	goto	l1184
   989  058F  3000               	movlw	0
   990  0590  00B3               	movwf	?___fttol+3
   991  0591  3000               	movlw	0
   992  0592  00B2               	movwf	?___fttol+2
   993  0593  3000               	movlw	0
   994  0594  00B1               	movwf	?___fttol+1
   995  0595  3000               	movlw	0
   996  0596  00B0               	movwf	?___fttol
   997  0597  0008               	return
   998  0598                     l1182:	
   999  0598  3001               	movlw	1
  1000  0599  00B4               	movwf	??___fttol
  1001  059A                     u1205:	
  1002  059A  1003               	clrc
  1003  059B  0DB9               	rlf	___fttol@lval,f
  1004  059C  0DBA               	rlf	___fttol@lval+1,f
  1005  059D  0DBB               	rlf	___fttol@lval+2,f
  1006  059E  0DBC               	rlf	___fttol@lval+3,f
  1007  059F  0BB4               	decfsz	??___fttol,f
  1008  05A0  2D9A               	goto	u1205
  1009  05A1  3001               	movlw	1
  1010  05A2  02BD               	subwf	___fttol@exp1,f
  1011  05A3                     l1184:	
  1012  05A3  08BD               	movf	___fttol@exp1,f
  1013  05A4  1D03               	skipz
  1014  05A5  2D98               	goto	l1182
  1015  05A6                     l1186:	
  1016  05A6  0838               	movf	___fttol@sign1,w
  1017  05A7  1903               	btfsc	3,2
  1018  05A8  2DB4               	goto	l1190
  1019  05A9  09B9               	comf	___fttol@lval,f
  1020  05AA  09BA               	comf	___fttol@lval+1,f
  1021  05AB  09BB               	comf	___fttol@lval+2,f
  1022  05AC  09BC               	comf	___fttol@lval+3,f
  1023  05AD  0AB9               	incf	___fttol@lval,f
  1024  05AE  1903               	skipnz
  1025  05AF  0ABA               	incf	___fttol@lval+1,f
  1026  05B0  1903               	skipnz
  1027  05B1  0ABB               	incf	___fttol@lval+2,f
  1028  05B2  1903               	skipnz
  1029  05B3  0ABC               	incf	___fttol@lval+3,f
  1030  05B4                     l1190:	
  1031  05B4  083C               	movf	___fttol@lval+3,w
  1032  05B5  00B3               	movwf	?___fttol+3
  1033  05B6  083B               	movf	___fttol@lval+2,w
  1034  05B7  00B2               	movwf	?___fttol+2
  1035  05B8  083A               	movf	___fttol@lval+1,w
  1036  05B9  00B1               	movwf	?___fttol+1
  1037  05BA  0839               	movf	___fttol@lval,w
  1038  05BB  00B0               	movwf	?___fttol
  1039  05BC  0008               	return
  1040  05BD                     __end_of___fttol:	
  1041                           
  1042                           	psect	text2
  1043  05BD                     __ptext2:	
  1044 ;; *************** function ___ftdiv *****************
  1045 ;; Defined at:
  1046 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
  1047 ;; Parameters:    Size  Location     Type
  1048 ;;  f2              3    0[BANK0 ] float 
  1049 ;;  f1              3    3[BANK0 ] float 
  1050 ;; Auto vars:     Size  Location     Type
  1051 ;;  f3              3   11[BANK0 ] float 
  1052 ;;  sign            1   15[BANK0 ] unsigned char 
  1053 ;;  exp             1   14[BANK0 ] unsigned char 
  1054 ;;  cntr            1   10[BANK0 ] unsigned char 
  1055 ;; Return value:  Size  Location     Type
  1056 ;;                  3    0[BANK0 ] float 
  1057 ;; Registers used:
  1058 ;;		wreg, status,2, status,0, pclath, cstack
  1059 ;; Tracked objects:
  1060 ;;		On entry : 0/0
  1061 ;;		On exit  : 0/0
  1062 ;;		Unchanged: 0/0
  1063 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1064 ;;      Params:         0       6       0       0       0
  1065 ;;      Locals:         0       6       0       0       0
  1066 ;;      Temps:          0       4       0       0       0
  1067 ;;      Totals:         0      16       0       0       0
  1068 ;;Total ram usage:       16 bytes
  1069 ;; Hardware stack levels used:    1
  1070 ;; Hardware stack levels required when called:    1
  1071 ;; This function calls:
  1072 ;;		___ftpack
  1073 ;; This function is called by:
  1074 ;;		_main
  1075 ;; This function uses a non-reentrant model
  1076 ;;
  1077                           
  1078                           
  1079                           ;psect for function ___ftdiv
  1080  05BD                     ___ftdiv:	
  1081                           
  1082                           ;incstack = 0
  1083                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  1084  05BD  1283               	bcf	3,5	;RP0=0, select bank0
  1085  05BE  1303               	bcf	3,6	;RP1=0, select bank0
  1086  05BF  0823               	movf	___ftdiv@f1,w
  1087  05C0  00A6               	movwf	??___ftdiv
  1088  05C1  0824               	movf	___ftdiv@f1+1,w
  1089  05C2  00A7               	movwf	??___ftdiv+1
  1090  05C3  0825               	movf	___ftdiv@f1+2,w
  1091  05C4  00A8               	movwf	??___ftdiv+2
  1092  05C5  1003               	clrc
  1093  05C6  0D27               	rlf	??___ftdiv+1,w
  1094  05C7  0D28               	rlf	??___ftdiv+2,w
  1095  05C8  00A9               	movwf	??___ftdiv+3
  1096  05C9  0829               	movf	??___ftdiv+3,w
  1097  05CA  00AE               	movwf	___ftdiv@exp
  1098  05CB  08AE               	movf	___ftdiv@exp,f
  1099  05CC  1D03               	skipz
  1100  05CD  2DD5               	goto	l1114
  1101  05CE  3000               	movlw	0
  1102  05CF  00A0               	movwf	?___ftdiv
  1103  05D0  3000               	movlw	0
  1104  05D1  00A1               	movwf	?___ftdiv+1
  1105  05D2  3000               	movlw	0
  1106  05D3  00A2               	movwf	?___ftdiv+2
  1107  05D4  0008               	return
  1108  05D5                     l1114:	
  1109  05D5  0820               	movf	___ftdiv@f2,w
  1110  05D6  00A6               	movwf	??___ftdiv
  1111  05D7  0821               	movf	___ftdiv@f2+1,w
  1112  05D8  00A7               	movwf	??___ftdiv+1
  1113  05D9  0822               	movf	___ftdiv@f2+2,w
  1114  05DA  00A8               	movwf	??___ftdiv+2
  1115  05DB  1003               	clrc
  1116  05DC  0D27               	rlf	??___ftdiv+1,w
  1117  05DD  0D28               	rlf	??___ftdiv+2,w
  1118  05DE  00A9               	movwf	??___ftdiv+3
  1119  05DF  0829               	movf	??___ftdiv+3,w
  1120  05E0  00AF               	movwf	___ftdiv@sign
  1121  05E1  08AF               	movf	___ftdiv@sign,f
  1122  05E2  1D03               	skipz
  1123  05E3  2DEB               	goto	l1120
  1124  05E4  3000               	movlw	0
  1125  05E5  00A0               	movwf	?___ftdiv
  1126  05E6  3000               	movlw	0
  1127  05E7  00A1               	movwf	?___ftdiv+1
  1128  05E8  3000               	movlw	0
  1129  05E9  00A2               	movwf	?___ftdiv+2
  1130  05EA  0008               	return
  1131  05EB                     l1120:	
  1132  05EB  3000               	movlw	0
  1133  05EC  00AB               	movwf	___ftdiv@f3
  1134  05ED  3000               	movlw	0
  1135  05EE  00AC               	movwf	___ftdiv@f3+1
  1136  05EF  3000               	movlw	0
  1137  05F0  00AD               	movwf	___ftdiv@f3+2
  1138  05F1  3089               	movlw	137
  1139  05F2  072F               	addwf	___ftdiv@sign,w
  1140  05F3  00A6               	movwf	??___ftdiv
  1141  05F4  0826               	movf	??___ftdiv,w
  1142  05F5  02AE               	subwf	___ftdiv@exp,f
  1143  05F6  0823               	movf	___ftdiv@f1,w
  1144  05F7  00A6               	movwf	??___ftdiv
  1145  05F8  0824               	movf	___ftdiv@f1+1,w
  1146  05F9  00A7               	movwf	??___ftdiv+1
  1147  05FA  0825               	movf	___ftdiv@f1+2,w
  1148  05FB  00A8               	movwf	??___ftdiv+2
  1149  05FC  3010               	movlw	16
  1150  05FD                     u1075:	
  1151  05FD  1003               	clrc
  1152  05FE  0CA8               	rrf	??___ftdiv+2,f
  1153  05FF  0CA7               	rrf	??___ftdiv+1,f
  1154  0600  0CA6               	rrf	??___ftdiv,f
  1155  0601  3EFF               	addlw	-1
  1156  0602  1D03               	skipz
  1157  0603  2DFD               	goto	u1075
  1158  0604  0826               	movf	??___ftdiv,w
  1159  0605  00A9               	movwf	??___ftdiv+3
  1160  0606  0829               	movf	??___ftdiv+3,w
  1161  0607  00AF               	movwf	___ftdiv@sign
  1162  0608  0820               	movf	___ftdiv@f2,w
  1163  0609  00A6               	movwf	??___ftdiv
  1164  060A  0821               	movf	___ftdiv@f2+1,w
  1165  060B  00A7               	movwf	??___ftdiv+1
  1166  060C  0822               	movf	___ftdiv@f2+2,w
  1167  060D  00A8               	movwf	??___ftdiv+2
  1168  060E  3010               	movlw	16
  1169  060F                     u1085:	
  1170  060F  1003               	clrc
  1171  0610  0CA8               	rrf	??___ftdiv+2,f
  1172  0611  0CA7               	rrf	??___ftdiv+1,f
  1173  0612  0CA6               	rrf	??___ftdiv,f
  1174  0613  3EFF               	addlw	-1
  1175  0614  1D03               	skipz
  1176  0615  2E0F               	goto	u1085
  1177  0616  0826               	movf	??___ftdiv,w
  1178  0617  00A9               	movwf	??___ftdiv+3
  1179  0618  0829               	movf	??___ftdiv+3,w
  1180  0619  06AF               	xorwf	___ftdiv@sign,f
  1181  061A  3080               	movlw	128
  1182  061B  00A6               	movwf	??___ftdiv
  1183  061C  0826               	movf	??___ftdiv,w
  1184  061D  05AF               	andwf	___ftdiv@sign,f
  1185  061E  17A4               	bsf	___ftdiv@f1+1,7
  1186  061F  30FF               	movlw	255
  1187  0620  05A3               	andwf	___ftdiv@f1,f
  1188  0621  30FF               	movlw	255
  1189  0622  05A4               	andwf	___ftdiv@f1+1,f
  1190  0623  3000               	movlw	0
  1191  0624  05A5               	andwf	___ftdiv@f1+2,f
  1192  0625  17A1               	bsf	___ftdiv@f2+1,7
  1193  0626  30FF               	movlw	255
  1194  0627  05A0               	andwf	___ftdiv@f2,f
  1195  0628  30FF               	movlw	255
  1196  0629  05A1               	andwf	___ftdiv@f2+1,f
  1197  062A  3000               	movlw	0
  1198  062B  05A2               	andwf	___ftdiv@f2+2,f
  1199  062C  3018               	movlw	24
  1200  062D  00A6               	movwf	??___ftdiv
  1201  062E  0826               	movf	??___ftdiv,w
  1202  062F  00AA               	movwf	___ftdiv@cntr
  1203  0630                     l1134:	
  1204  0630  3001               	movlw	1
  1205  0631                     u1095:	
  1206  0631  1003               	clrc
  1207  0632  0DAB               	rlf	___ftdiv@f3,f
  1208  0633  0DAC               	rlf	___ftdiv@f3+1,f
  1209  0634  0DAD               	rlf	___ftdiv@f3+2,f
  1210  0635  3EFF               	addlw	-1
  1211  0636  1D03               	skipz
  1212  0637  2E31               	goto	u1095
  1213  0638  0822               	movf	___ftdiv@f2+2,w
  1214  0639  0225               	subwf	___ftdiv@f1+2,w
  1215  063A  1D03               	skipz
  1216  063B  2E42               	goto	u1105
  1217  063C  0821               	movf	___ftdiv@f2+1,w
  1218  063D  0224               	subwf	___ftdiv@f1+1,w
  1219  063E  1D03               	skipz
  1220  063F  2E42               	goto	u1105
  1221  0640  0820               	movf	___ftdiv@f2,w
  1222  0641  0223               	subwf	___ftdiv@f1,w
  1223  0642                     u1105:	
  1224  0642  1C03               	skipc
  1225  0643  2E4F               	goto	l1142
  1226  0644  0820               	movf	___ftdiv@f2,w
  1227  0645  02A3               	subwf	___ftdiv@f1,f
  1228  0646  0821               	movf	___ftdiv@f2+1,w
  1229  0647  1C03               	skipc
  1230  0648  0F21               	incfsz	___ftdiv@f2+1,w
  1231  0649  02A4               	subwf	___ftdiv@f1+1,f
  1232  064A  0822               	movf	___ftdiv@f2+2,w
  1233  064B  1C03               	skipc
  1234  064C  0A22               	incf	___ftdiv@f2+2,w
  1235  064D  02A5               	subwf	___ftdiv@f1+2,f
  1236  064E  142B               	bsf	___ftdiv@f3,0
  1237  064F                     l1142:	
  1238  064F  3001               	movlw	1
  1239  0650                     u1115:	
  1240  0650  1003               	clrc
  1241  0651  0DA3               	rlf	___ftdiv@f1,f
  1242  0652  0DA4               	rlf	___ftdiv@f1+1,f
  1243  0653  0DA5               	rlf	___ftdiv@f1+2,f
  1244  0654  3EFF               	addlw	-1
  1245  0655  1D03               	skipz
  1246  0656  2E50               	goto	u1115
  1247  0657  3001               	movlw	1
  1248  0658  02AA               	subwf	___ftdiv@cntr,f
  1249  0659  1D03               	btfss	3,2
  1250  065A  2E30               	goto	l1134
  1251  065B  082B               	movf	___ftdiv@f3,w
  1252  065C  00F0               	movwf	___ftpack@arg
  1253  065D  082C               	movf	___ftdiv@f3+1,w
  1254  065E  00F1               	movwf	___ftpack@arg+1
  1255  065F  082D               	movf	___ftdiv@f3+2,w
  1256  0660  00F2               	movwf	___ftpack@arg+2
  1257  0661  082E               	movf	___ftdiv@exp,w
  1258  0662  00A6               	movwf	??___ftdiv
  1259  0663  0826               	movf	??___ftdiv,w
  1260  0664  00F3               	movwf	___ftpack@exp
  1261  0665  082F               	movf	___ftdiv@sign,w
  1262  0666  00A7               	movwf	??___ftdiv+1
  1263  0667  0827               	movf	??___ftdiv+1,w
  1264  0668  00F4               	movwf	___ftpack@sign
  1265  0669  120A  118A  24C7   	fcall	___ftpack
  1266  066C  0870               	movf	?___ftpack,w
  1267  066D  1283               	bcf	3,5	;RP0=0, select bank0
  1268  066E  1303               	bcf	3,6	;RP1=0, select bank0
  1269  066F  00A0               	movwf	?___ftdiv
  1270  0670  0871               	movf	?___ftpack+1,w
  1271  0671  00A1               	movwf	?___ftdiv+1
  1272  0672  0872               	movf	?___ftpack+2,w
  1273  0673  00A2               	movwf	?___ftdiv+2
  1274  0674  0008               	return
  1275  0675                     __end_of___ftdiv:	
  1276                           
  1277                           	psect	text3
  1278  02FD                     __ptext3:	
  1279 ;; *************** function ___awtoft *****************
  1280 ;; Defined at:
  1281 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
  1282 ;; Parameters:    Size  Location     Type
  1283 ;;  c               2    8[COMMON] int 
  1284 ;; Auto vars:     Size  Location     Type
  1285 ;;  sign            1   13[COMMON] unsigned char 
  1286 ;; Return value:  Size  Location     Type
  1287 ;;                  3    8[COMMON] float 
  1288 ;; Registers used:
  1289 ;;		wreg, status,2, status,0, pclath, cstack
  1290 ;; Tracked objects:
  1291 ;;		On entry : 0/0
  1292 ;;		On exit  : 0/0
  1293 ;;		Unchanged: 0/0
  1294 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1295 ;;      Params:         3       0       0       0       0
  1296 ;;      Locals:         1       0       0       0       0
  1297 ;;      Temps:          2       0       0       0       0
  1298 ;;      Totals:         6       0       0       0       0
  1299 ;;Total ram usage:        6 bytes
  1300 ;; Hardware stack levels used:    1
  1301 ;; Hardware stack levels required when called:    1
  1302 ;; This function calls:
  1303 ;;		___ftpack
  1304 ;; This function is called by:
  1305 ;;		_main
  1306 ;; This function uses a non-reentrant model
  1307 ;;
  1308                           
  1309                           
  1310                           ;psect for function ___awtoft
  1311  02FD                     ___awtoft:	
  1312                           
  1313                           ;incstack = 0
  1314                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  1315  02FD  01FD               	clrf	___awtoft@sign
  1316  02FE  1FF9               	btfss	___awtoft@c+1,7
  1317  02FF  2B07               	goto	l1104
  1318  0300  09F8               	comf	___awtoft@c,f
  1319  0301  09F9               	comf	___awtoft@c+1,f
  1320  0302  0AF8               	incf	___awtoft@c,f
  1321  0303  1903               	skipnz
  1322  0304  0AF9               	incf	___awtoft@c+1,f
  1323  0305  01FD               	clrf	___awtoft@sign
  1324  0306  0AFD               	incf	___awtoft@sign,f
  1325  0307                     l1104:	
  1326  0307  0878               	movf	___awtoft@c,w
  1327  0308  00F0               	movwf	___ftpack@arg
  1328  0309  0879               	movf	___awtoft@c+1,w
  1329  030A  00F1               	movwf	___ftpack@arg+1
  1330  030B  01F2               	clrf	___ftpack@arg+2
  1331  030C  308E               	movlw	142
  1332  030D  00FB               	movwf	??___awtoft
  1333  030E  087B               	movf	??___awtoft,w
  1334  030F  00F3               	movwf	___ftpack@exp
  1335  0310  087D               	movf	___awtoft@sign,w
  1336  0311  00FC               	movwf	??___awtoft+1
  1337  0312  087C               	movf	??___awtoft+1,w
  1338  0313  00F4               	movwf	___ftpack@sign
  1339  0314  120A  118A  24C7   	fcall	___ftpack
  1340  0317  0870               	movf	?___ftpack,w
  1341  0318  00F8               	movwf	?___awtoft
  1342  0319  0871               	movf	?___ftpack+1,w
  1343  031A  00F9               	movwf	?___awtoft+1
  1344  031B  0872               	movf	?___ftpack+2,w
  1345  031C  00FA               	movwf	?___awtoft+2
  1346  031D  0008               	return
  1347  031E                     __end_of___awtoft:	
  1348                           
  1349                           	psect	text4
  1350  04C7                     __ptext4:	
  1351 ;; *************** function ___ftpack *****************
  1352 ;; Defined at:
  1353 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
  1354 ;; Parameters:    Size  Location     Type
  1355 ;;  arg             3    0[COMMON] unsigned um
  1356 ;;  exp             1    3[COMMON] unsigned char 
  1357 ;;  sign            1    4[COMMON] unsigned char 
  1358 ;; Auto vars:     Size  Location     Type
  1359 ;;		None
  1360 ;; Return value:  Size  Location     Type
  1361 ;;                  3    0[COMMON] float 
  1362 ;; Registers used:
  1363 ;;		wreg, status,2, status,0
  1364 ;; Tracked objects:
  1365 ;;		On entry : 0/0
  1366 ;;		On exit  : 0/0
  1367 ;;		Unchanged: 0/0
  1368 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1369 ;;      Params:         5       0       0       0       0
  1370 ;;      Locals:         0       0       0       0       0
  1371 ;;      Temps:          3       0       0       0       0
  1372 ;;      Totals:         8       0       0       0       0
  1373 ;;Total ram usage:        8 bytes
  1374 ;; Hardware stack levels used:    1
  1375 ;; This function calls:
  1376 ;;		Nothing
  1377 ;; This function is called by:
  1378 ;;		___awtoft
  1379 ;;		___ftdiv
  1380 ;; This function uses a non-reentrant model
  1381 ;;
  1382                           
  1383                           
  1384                           ;psect for function ___ftpack
  1385  04C7                     ___ftpack:	
  1386                           
  1387                           ;incstack = 0
  1388                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  1389  04C7  0873               	movf	___ftpack@exp,w
  1390  04C8  1903               	btfsc	3,2
  1391  04C9  2CCF               	goto	l948
  1392  04CA  0872               	movf	___ftpack@arg+2,w
  1393  04CB  0471               	iorwf	___ftpack@arg+1,w
  1394  04CC  0470               	iorwf	___ftpack@arg,w
  1395  04CD  1D03               	skipz
  1396  04CE  2CE2               	goto	l954
  1397  04CF                     l948:	
  1398  04CF  3000               	movlw	0
  1399  04D0  00F0               	movwf	?___ftpack
  1400  04D1  3000               	movlw	0
  1401  04D2  00F1               	movwf	?___ftpack+1
  1402  04D3  3000               	movlw	0
  1403  04D4  00F2               	movwf	?___ftpack+2
  1404  04D5  0008               	return
  1405  04D6                     l952:	
  1406  04D6  3001               	movlw	1
  1407  04D7  00F5               	movwf	??___ftpack
  1408  04D8  0875               	movf	??___ftpack,w
  1409  04D9  07F3               	addwf	___ftpack@exp,f
  1410  04DA  3001               	movlw	1
  1411  04DB                     u715:	
  1412  04DB  1003               	clrc
  1413  04DC  0CF2               	rrf	___ftpack@arg+2,f
  1414  04DD  0CF1               	rrf	___ftpack@arg+1,f
  1415  04DE  0CF0               	rrf	___ftpack@arg,f
  1416  04DF  3EFF               	addlw	-1
  1417  04E0  1D03               	skipz
  1418  04E1  2CDB               	goto	u715
  1419  04E2                     l954:	
  1420  04E2  30FE               	movlw	254
  1421  04E3  0572               	andwf	___ftpack@arg+2,w
  1422  04E4  1903               	btfsc	3,2
  1423  04E5  2CFD               	goto	l330
  1424  04E6  2CD6               	goto	l952
  1425  04E7                     l956:	
  1426  04E7  3001               	movlw	1
  1427  04E8  00F5               	movwf	??___ftpack
  1428  04E9  0875               	movf	??___ftpack,w
  1429  04EA  07F3               	addwf	___ftpack@exp,f
  1430  04EB  3001               	movlw	1
  1431  04EC  07F0               	addwf	___ftpack@arg,f
  1432  04ED  3000               	movlw	0
  1433  04EE  1803               	skipnc
  1434  04EF  3001               	movlw	1
  1435  04F0  07F1               	addwf	___ftpack@arg+1,f
  1436  04F1  3000               	movlw	0
  1437  04F2  1803               	skipnc
  1438  04F3  3001               	movlw	1
  1439  04F4  07F2               	addwf	___ftpack@arg+2,f
  1440  04F5  3001               	movlw	1
  1441  04F6                     u735:	
  1442  04F6  1003               	clrc
  1443  04F7  0CF2               	rrf	___ftpack@arg+2,f
  1444  04F8  0CF1               	rrf	___ftpack@arg+1,f
  1445  04F9  0CF0               	rrf	___ftpack@arg,f
  1446  04FA  3EFF               	addlw	-1
  1447  04FB  1D03               	skipz
  1448  04FC  2CF6               	goto	u735
  1449  04FD                     l330:	
  1450  04FD  30FF               	movlw	255
  1451  04FE  0572               	andwf	___ftpack@arg+2,w
  1452  04FF  1903               	btfsc	3,2
  1453  0500  2D0C               	goto	l964
  1454  0501  2CE7               	goto	l956
  1455  0502                     l962:	
  1456  0502  3001               	movlw	1
  1457  0503  02F3               	subwf	___ftpack@exp,f
  1458  0504  3001               	movlw	1
  1459  0505                     u755:	
  1460  0505  1003               	clrc
  1461  0506  0DF0               	rlf	___ftpack@arg,f
  1462  0507  0DF1               	rlf	___ftpack@arg+1,f
  1463  0508  0DF2               	rlf	___ftpack@arg+2,f
  1464  0509  3EFF               	addlw	-1
  1465  050A  1D03               	skipz
  1466  050B  2D05               	goto	u755
  1467  050C                     l964:	
  1468  050C  1FF1               	btfss	___ftpack@arg+1,7
  1469  050D  2D02               	goto	l962
  1470  050E  1873               	btfsc	___ftpack@exp,0
  1471  050F  2D16               	goto	l336
  1472  0510  30FF               	movlw	255
  1473  0511  05F0               	andwf	___ftpack@arg,f
  1474  0512  307F               	movlw	127
  1475  0513  05F1               	andwf	___ftpack@arg+1,f
  1476  0514  30FF               	movlw	255
  1477  0515  05F2               	andwf	___ftpack@arg+2,f
  1478  0516                     l336:	
  1479  0516  1003               	clrc
  1480  0517  0CF3               	rrf	___ftpack@exp,f
  1481  0518  0873               	movf	___ftpack@exp,w
  1482  0519  00F5               	movwf	??___ftpack
  1483  051A  01F6               	clrf	??___ftpack+1
  1484  051B  01F7               	clrf	??___ftpack+2
  1485  051C  3010               	movlw	16
  1486  051D                     u785:	
  1487  051D  1003               	clrc
  1488  051E  0DF5               	rlf	??___ftpack,f
  1489  051F  0DF6               	rlf	??___ftpack+1,f
  1490  0520  0DF7               	rlf	??___ftpack+2,f
  1491  0521  3EFF               	addlw	-1
  1492  0522  1D03               	skipz
  1493  0523  2D1D               	goto	u785
  1494  0524  0875               	movf	??___ftpack,w
  1495  0525  04F0               	iorwf	___ftpack@arg,f
  1496  0526  0876               	movf	??___ftpack+1,w
  1497  0527  04F1               	iorwf	___ftpack@arg+1,f
  1498  0528  0877               	movf	??___ftpack+2,w
  1499  0529  04F2               	iorwf	___ftpack@arg+2,f
  1500  052A  0874               	movf	___ftpack@sign,w
  1501  052B  1903               	btfsc	3,2
  1502  052C  0008               	return
  1503  052D  17F2               	bsf	___ftpack@arg+2,7
  1504  052E  0008               	return
  1505  052F                     __end_of___ftpack:	
  1506                           
  1507                           	psect	text5
  1508  03C4                     __ptext5:	
  1509 ;; *************** function ___awmod *****************
  1510 ;; Defined at:
  1511 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awmod.c"
  1512 ;; Parameters:    Size  Location     Type
  1513 ;;  divisor         2    0[COMMON] int 
  1514 ;;  dividend        2    2[COMMON] int 
  1515 ;; Auto vars:     Size  Location     Type
  1516 ;;  sign            1    6[COMMON] unsigned char 
  1517 ;;  counter         1    5[COMMON] unsigned char 
  1518 ;; Return value:  Size  Location     Type
  1519 ;;                  2    0[COMMON] int 
  1520 ;; Registers used:
  1521 ;;		wreg, status,2, status,0
  1522 ;; Tracked objects:
  1523 ;;		On entry : 0/0
  1524 ;;		On exit  : 0/0
  1525 ;;		Unchanged: 0/0
  1526 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1527 ;;      Params:         4       0       0       0       0
  1528 ;;      Locals:         2       0       0       0       0
  1529 ;;      Temps:          1       0       0       0       0
  1530 ;;      Totals:         7       0       0       0       0
  1531 ;;Total ram usage:        7 bytes
  1532 ;; Hardware stack levels used:    1
  1533 ;; This function calls:
  1534 ;;		Nothing
  1535 ;; This function is called by:
  1536 ;;		_main
  1537 ;; This function uses a non-reentrant model
  1538 ;;
  1539                           
  1540                           
  1541                           ;psect for function ___awmod
  1542  03C4                     ___awmod:	
  1543                           
  1544                           ;incstack = 0
  1545                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  1546  03C4  01F6               	clrf	___awmod@sign
  1547  03C5  1FF3               	btfss	___awmod@dividend+1,7
  1548  03C6  2BCE               	goto	l1066
  1549  03C7  09F2               	comf	___awmod@dividend,f
  1550  03C8  09F3               	comf	___awmod@dividend+1,f
  1551  03C9  0AF2               	incf	___awmod@dividend,f
  1552  03CA  1903               	skipnz
  1553  03CB  0AF3               	incf	___awmod@dividend+1,f
  1554  03CC  01F6               	clrf	___awmod@sign
  1555  03CD  0AF6               	incf	___awmod@sign,f
  1556  03CE                     l1066:	
  1557  03CE  1FF1               	btfss	___awmod@divisor+1,7
  1558  03CF  2BD5               	goto	l1070
  1559  03D0  09F0               	comf	___awmod@divisor,f
  1560  03D1  09F1               	comf	___awmod@divisor+1,f
  1561  03D2  0AF0               	incf	___awmod@divisor,f
  1562  03D3  1903               	skipnz
  1563  03D4  0AF1               	incf	___awmod@divisor+1,f
  1564  03D5                     l1070:	
  1565  03D5  0871               	movf	___awmod@divisor+1,w
  1566  03D6  0470               	iorwf	___awmod@divisor,w
  1567  03D7  1903               	skipnz
  1568  03D8  2C02               	goto	l1088
  1569  03D9  01F5               	clrf	___awmod@counter
  1570  03DA  0AF5               	incf	___awmod@counter,f
  1571  03DB                     l1078:	
  1572  03DB  1BF1               	btfsc	___awmod@divisor+1,7
  1573  03DC  2BE9               	goto	l1080
  1574  03DD  3001               	movlw	1
  1575  03DE                     u985:	
  1576  03DE  1003               	clrc
  1577  03DF  0DF0               	rlf	___awmod@divisor,f
  1578  03E0  0DF1               	rlf	___awmod@divisor+1,f
  1579  03E1  3EFF               	addlw	-1
  1580  03E2  1D03               	skipz
  1581  03E3  2BDE               	goto	u985
  1582  03E4  3001               	movlw	1
  1583  03E5  00F4               	movwf	??___awmod
  1584  03E6  0874               	movf	??___awmod,w
  1585  03E7  07F5               	addwf	___awmod@counter,f
  1586  03E8  2BDB               	goto	l1078
  1587  03E9                     l1080:	
  1588  03E9  0871               	movf	___awmod@divisor+1,w
  1589  03EA  0273               	subwf	___awmod@dividend+1,w
  1590  03EB  1D03               	skipz
  1591  03EC  2BEF               	goto	u1005
  1592  03ED  0870               	movf	___awmod@divisor,w
  1593  03EE  0272               	subwf	___awmod@dividend,w
  1594  03EF                     u1005:	
  1595  03EF  1C03               	skipc
  1596  03F0  2BF7               	goto	l1084
  1597  03F1  0870               	movf	___awmod@divisor,w
  1598  03F2  02F2               	subwf	___awmod@dividend,f
  1599  03F3  0871               	movf	___awmod@divisor+1,w
  1600  03F4  1C03               	skipc
  1601  03F5  03F3               	decf	___awmod@dividend+1,f
  1602  03F6  02F3               	subwf	___awmod@dividend+1,f
  1603  03F7                     l1084:	
  1604  03F7  3001               	movlw	1
  1605  03F8                     u1015:	
  1606  03F8  1003               	clrc
  1607  03F9  0CF1               	rrf	___awmod@divisor+1,f
  1608  03FA  0CF0               	rrf	___awmod@divisor,f
  1609  03FB  3EFF               	addlw	-1
  1610  03FC  1D03               	skipz
  1611  03FD  2BF8               	goto	u1015
  1612  03FE  3001               	movlw	1
  1613  03FF  02F5               	subwf	___awmod@counter,f
  1614  0400  1D03               	btfss	3,2
  1615  0401  2BE9               	goto	l1080
  1616  0402                     l1088:	
  1617  0402  0876               	movf	___awmod@sign,w
  1618  0403  1903               	btfsc	3,2
  1619  0404  2C0A               	goto	l1092
  1620  0405  09F2               	comf	___awmod@dividend,f
  1621  0406  09F3               	comf	___awmod@dividend+1,f
  1622  0407  0AF2               	incf	___awmod@dividend,f
  1623  0408  1903               	skipnz
  1624  0409  0AF3               	incf	___awmod@dividend+1,f
  1625  040A                     l1092:	
  1626  040A  0873               	movf	___awmod@dividend+1,w
  1627  040B  01F1               	clrf	?___awmod+1
  1628  040C  07F1               	addwf	?___awmod+1,f
  1629  040D  0872               	movf	___awmod@dividend,w
  1630  040E  01F0               	clrf	?___awmod
  1631  040F  07F0               	addwf	?___awmod,f
  1632  0410  0008               	return
  1633  0411                     __end_of___awmod:	
  1634                           
  1635                           	psect	text6
  1636  046C                     __ptext6:	
  1637 ;; *************** function ___awdiv *****************
  1638 ;; Defined at:
  1639 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
  1640 ;; Parameters:    Size  Location     Type
  1641 ;;  divisor         2    0[COMMON] int 
  1642 ;;  dividend        2    2[COMMON] int 
  1643 ;; Auto vars:     Size  Location     Type
  1644 ;;  quotient        2    7[COMMON] int 
  1645 ;;  sign            1    6[COMMON] unsigned char 
  1646 ;;  counter         1    5[COMMON] unsigned char 
  1647 ;; Return value:  Size  Location     Type
  1648 ;;                  2    0[COMMON] int 
  1649 ;; Registers used:
  1650 ;;		wreg, status,2, status,0
  1651 ;; Tracked objects:
  1652 ;;		On entry : 0/0
  1653 ;;		On exit  : 0/0
  1654 ;;		Unchanged: 0/0
  1655 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1656 ;;      Params:         4       0       0       0       0
  1657 ;;      Locals:         4       0       0       0       0
  1658 ;;      Temps:          1       0       0       0       0
  1659 ;;      Totals:         9       0       0       0       0
  1660 ;;Total ram usage:        9 bytes
  1661 ;; Hardware stack levels used:    1
  1662 ;; This function calls:
  1663 ;;		Nothing
  1664 ;; This function is called by:
  1665 ;;		_main
  1666 ;; This function uses a non-reentrant model
  1667 ;;
  1668                           
  1669                           
  1670                           ;psect for function ___awdiv
  1671  046C                     ___awdiv:	
  1672                           
  1673                           ;incstack = 0
  1674                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  1675  046C  01F6               	clrf	___awdiv@sign
  1676  046D  1FF1               	btfss	___awdiv@divisor+1,7
  1677  046E  2C76               	goto	l1022
  1678  046F  09F0               	comf	___awdiv@divisor,f
  1679  0470  09F1               	comf	___awdiv@divisor+1,f
  1680  0471  0AF0               	incf	___awdiv@divisor,f
  1681  0472  1903               	skipnz
  1682  0473  0AF1               	incf	___awdiv@divisor+1,f
  1683  0474  01F6               	clrf	___awdiv@sign
  1684  0475  0AF6               	incf	___awdiv@sign,f
  1685  0476                     l1022:	
  1686  0476  1FF3               	btfss	___awdiv@dividend+1,7
  1687  0477  2C81               	goto	l1028
  1688  0478  09F2               	comf	___awdiv@dividend,f
  1689  0479  09F3               	comf	___awdiv@dividend+1,f
  1690  047A  0AF2               	incf	___awdiv@dividend,f
  1691  047B  1903               	skipnz
  1692  047C  0AF3               	incf	___awdiv@dividend+1,f
  1693  047D  3001               	movlw	1
  1694  047E  00F4               	movwf	??___awdiv
  1695  047F  0874               	movf	??___awdiv,w
  1696  0480  06F6               	xorwf	___awdiv@sign,f
  1697  0481                     l1028:	
  1698  0481  01F7               	clrf	___awdiv@quotient
  1699  0482  01F8               	clrf	___awdiv@quotient+1
  1700  0483  0871               	movf	___awdiv@divisor+1,w
  1701  0484  0470               	iorwf	___awdiv@divisor,w
  1702  0485  1903               	skipnz
  1703  0486  2CB8               	goto	l1050
  1704  0487  01F5               	clrf	___awdiv@counter
  1705  0488  0AF5               	incf	___awdiv@counter,f
  1706  0489                     l1038:	
  1707  0489  1BF1               	btfsc	___awdiv@divisor+1,7
  1708  048A  2C97               	goto	l1040
  1709  048B  3001               	movlw	1
  1710  048C                     u885:	
  1711  048C  1003               	clrc
  1712  048D  0DF0               	rlf	___awdiv@divisor,f
  1713  048E  0DF1               	rlf	___awdiv@divisor+1,f
  1714  048F  3EFF               	addlw	-1
  1715  0490  1D03               	skipz
  1716  0491  2C8C               	goto	u885
  1717  0492  3001               	movlw	1
  1718  0493  00F4               	movwf	??___awdiv
  1719  0494  0874               	movf	??___awdiv,w
  1720  0495  07F5               	addwf	___awdiv@counter,f
  1721  0496  2C89               	goto	l1038
  1722  0497                     l1040:	
  1723  0497  3001               	movlw	1
  1724  0498                     u905:	
  1725  0498  1003               	clrc
  1726  0499  0DF7               	rlf	___awdiv@quotient,f
  1727  049A  0DF8               	rlf	___awdiv@quotient+1,f
  1728  049B  3EFF               	addlw	-1
  1729  049C  1D03               	skipz
  1730  049D  2C98               	goto	u905
  1731  049E  0871               	movf	___awdiv@divisor+1,w
  1732  049F  0273               	subwf	___awdiv@dividend+1,w
  1733  04A0  1D03               	skipz
  1734  04A1  2CA4               	goto	u915
  1735  04A2  0870               	movf	___awdiv@divisor,w
  1736  04A3  0272               	subwf	___awdiv@dividend,w
  1737  04A4                     u915:	
  1738  04A4  1C03               	skipc
  1739  04A5  2CAD               	goto	l1046
  1740  04A6  0870               	movf	___awdiv@divisor,w
  1741  04A7  02F2               	subwf	___awdiv@dividend,f
  1742  04A8  0871               	movf	___awdiv@divisor+1,w
  1743  04A9  1C03               	skipc
  1744  04AA  03F3               	decf	___awdiv@dividend+1,f
  1745  04AB  02F3               	subwf	___awdiv@dividend+1,f
  1746  04AC  1477               	bsf	___awdiv@quotient,0
  1747  04AD                     l1046:	
  1748  04AD  3001               	movlw	1
  1749  04AE                     u925:	
  1750  04AE  1003               	clrc
  1751  04AF  0CF1               	rrf	___awdiv@divisor+1,f
  1752  04B0  0CF0               	rrf	___awdiv@divisor,f
  1753  04B1  3EFF               	addlw	-1
  1754  04B2  1D03               	skipz
  1755  04B3  2CAE               	goto	u925
  1756  04B4  3001               	movlw	1
  1757  04B5  02F5               	subwf	___awdiv@counter,f
  1758  04B6  1D03               	btfss	3,2
  1759  04B7  2C97               	goto	l1040
  1760  04B8                     l1050:	
  1761  04B8  0876               	movf	___awdiv@sign,w
  1762  04B9  1903               	btfsc	3,2
  1763  04BA  2CC0               	goto	l1054
  1764  04BB  09F7               	comf	___awdiv@quotient,f
  1765  04BC  09F8               	comf	___awdiv@quotient+1,f
  1766  04BD  0AF7               	incf	___awdiv@quotient,f
  1767  04BE  1903               	skipnz
  1768  04BF  0AF8               	incf	___awdiv@quotient+1,f
  1769  04C0                     l1054:	
  1770  04C0  0878               	movf	___awdiv@quotient+1,w
  1771  04C1  01F1               	clrf	?___awdiv+1
  1772  04C2  07F1               	addwf	?___awdiv+1,f
  1773  04C3  0877               	movf	___awdiv@quotient,w
  1774  04C4  01F0               	clrf	?___awdiv
  1775  04C5  07F0               	addwf	?___awdiv,f
  1776  04C6  0008               	return
  1777  04C7                     __end_of___awdiv:	
  1778                           
  1779                           	psect	text7
  1780  031E                     __ptext7:	
  1781 ;; *************** function _Lcd_Write_String *****************
  1782 ;; Defined at:
  1783 ;;		line 97 in file "lcd.h"
  1784 ;; Parameters:    Size  Location     Type
  1785 ;;  a               1    wreg     PTR unsigned char 
  1786 ;;		 -> STR_5(13), STR_4(3), STR_3(12), STR_2(12), 
  1787 ;;		 -> STR_1(13), 
  1788 ;; Auto vars:     Size  Location     Type
  1789 ;;  a               1    7[COMMON] PTR unsigned char 
  1790 ;;		 -> STR_5(13), STR_4(3), STR_3(12), STR_2(12), 
  1791 ;;		 -> STR_1(13), 
  1792 ;;  i               2    5[COMMON] int 
  1793 ;; Return value:  Size  Location     Type
  1794 ;;		None               void
  1795 ;; Registers used:
  1796 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1797 ;; Tracked objects:
  1798 ;;		On entry : 0/0
  1799 ;;		On exit  : 0/0
  1800 ;;		Unchanged: 0/0
  1801 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1802 ;;      Params:         0       0       0       0       0
  1803 ;;      Locals:         3       0       0       0       0
  1804 ;;      Temps:          0       0       0       0       0
  1805 ;;      Totals:         3       0       0       0       0
  1806 ;;Total ram usage:        3 bytes
  1807 ;; Hardware stack levels used:    1
  1808 ;; Hardware stack levels required when called:    2
  1809 ;; This function calls:
  1810 ;;		_Lcd_Write_Char
  1811 ;; This function is called by:
  1812 ;;		_main
  1813 ;; This function uses a non-reentrant model
  1814 ;;
  1815                           
  1816                           
  1817                           ;psect for function _Lcd_Write_String
  1818  031E                     _Lcd_Write_String:	
  1819                           
  1820                           ;incstack = 0
  1821                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1822                           ;Lcd_Write_String@a stored from wreg
  1823  031E  00F7               	movwf	Lcd_Write_String@a
  1824                           
  1825                           ;lcd.h: 99: int i;
  1826                           ;lcd.h: 100: for(i=0;a[i]!='\0';i++)
  1827  031F  01F5               	clrf	Lcd_Write_String@i
  1828  0320  01F6               	clrf	Lcd_Write_String@i+1
  1829  0321                     l1012:	
  1830  0321  0875               	movf	Lcd_Write_String@i,w
  1831  0322  0777               	addwf	Lcd_Write_String@a,w
  1832  0323  0084               	movwf	4
  1833  0324  120A  118A  2003  120A  118A  	fcall	stringdir
  1834  0329  3800               	iorlw	0
  1835  032A  1903               	btfsc	3,2
  1836  032B  0008               	return
  1837                           
  1838                           ;lcd.h: 101: Lcd_Write_Char(a[i]);
  1839  032C  0875               	movf	Lcd_Write_String@i,w
  1840  032D  0777               	addwf	Lcd_Write_String@a,w
  1841  032E  0084               	movwf	4
  1842  032F  120A  118A  2003  120A  118A  	fcall	stringdir
  1843  0334  120A  118A  2340  120A  118A  	fcall	_Lcd_Write_Char
  1844  0339  3001               	movlw	1
  1845  033A  07F5               	addwf	Lcd_Write_String@i,f
  1846  033B  1803               	skipnc
  1847  033C  0AF6               	incf	Lcd_Write_String@i+1,f
  1848  033D  3000               	movlw	0
  1849  033E  07F6               	addwf	Lcd_Write_String@i+1,f
  1850  033F  2B21               	goto	l1012
  1851  0340                     __end_of_Lcd_Write_String:	
  1852                           
  1853                           	psect	text8
  1854  0340                     __ptext8:	
  1855 ;; *************** function _Lcd_Write_Char *****************
  1856 ;; Defined at:
  1857 ;;		line 81 in file "lcd.h"
  1858 ;; Parameters:    Size  Location     Type
  1859 ;;  a               1    wreg     unsigned char 
  1860 ;; Auto vars:     Size  Location     Type
  1861 ;;  a               1    4[COMMON] unsigned char 
  1862 ;;  y               1    3[COMMON] unsigned char 
  1863 ;;  temp            1    2[COMMON] unsigned char 
  1864 ;; Return value:  Size  Location     Type
  1865 ;;		None               void
  1866 ;; Registers used:
  1867 ;;		wreg, status,2, status,0, pclath, cstack
  1868 ;; Tracked objects:
  1869 ;;		On entry : 0/0
  1870 ;;		On exit  : 0/0
  1871 ;;		Unchanged: 0/0
  1872 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1873 ;;      Params:         0       0       0       0       0
  1874 ;;      Locals:         3       0       0       0       0
  1875 ;;      Temps:          1       0       0       0       0
  1876 ;;      Totals:         4       0       0       0       0
  1877 ;;Total ram usage:        4 bytes
  1878 ;; Hardware stack levels used:    1
  1879 ;; Hardware stack levels required when called:    1
  1880 ;; This function calls:
  1881 ;;		_Lcd_Port
  1882 ;; This function is called by:
  1883 ;;		_Lcd_Write_String
  1884 ;;		_main
  1885 ;; This function uses a non-reentrant model
  1886 ;;
  1887                           
  1888                           
  1889                           ;psect for function _Lcd_Write_Char
  1890  0340                     _Lcd_Write_Char:	
  1891                           
  1892                           ;incstack = 0
  1893                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  1894                           ;Lcd_Write_Char@a stored from wreg
  1895  0340  00F4               	movwf	Lcd_Write_Char@a
  1896                           
  1897                           ;lcd.h: 83: char temp,y;
  1898                           ;lcd.h: 84: temp = a&0x0F;
  1899  0341  0874               	movf	Lcd_Write_Char@a,w
  1900  0342  390F               	andlw	15
  1901  0343  00F1               	movwf	??_Lcd_Write_Char
  1902  0344  0871               	movf	??_Lcd_Write_Char,w
  1903  0345  00F2               	movwf	Lcd_Write_Char@temp
  1904                           
  1905                           ;lcd.h: 85: y = a&0xF0;
  1906  0346  0874               	movf	Lcd_Write_Char@a,w
  1907  0347  39F0               	andlw	240
  1908  0348  00F1               	movwf	??_Lcd_Write_Char
  1909  0349  0871               	movf	??_Lcd_Write_Char,w
  1910  034A  00F3               	movwf	Lcd_Write_Char@y
  1911                           
  1912                           ;lcd.h: 86: RD2 = 1;
  1913  034B  1283               	bcf	3,5	;RP0=0, select bank0
  1914  034C  1303               	bcf	3,6	;RP1=0, select bank0
  1915  034D  1508               	bsf	8,2	;volatile
  1916                           
  1917                           ;lcd.h: 87: Lcd_Port(y>>4);
  1918  034E  0873               	movf	Lcd_Write_Char@y,w
  1919  034F  00F1               	movwf	??_Lcd_Write_Char
  1920  0350  3004               	movlw	4
  1921  0351                     u685:	
  1922  0351  1003               	clrc
  1923  0352  0CF1               	rrf	??_Lcd_Write_Char,f
  1924  0353  3EFF               	addlw	-1
  1925  0354  1D03               	skipz
  1926  0355  2B51               	goto	u685
  1927  0356  0871               	movf	??_Lcd_Write_Char,w
  1928  0357  120A  118A  22C9  120A  118A  	fcall	_Lcd_Port
  1929                           
  1930                           ;lcd.h: 88: RD3 = 1;
  1931  035C  1283               	bcf	3,5	;RP0=0, select bank0
  1932  035D  1303               	bcf	3,6	;RP1=0, select bank0
  1933  035E  1588               	bsf	8,3	;volatile
  1934                           
  1935                           ;lcd.h: 89: _delay((unsigned long)((40)*(8000000/4000000.0)));
  1936  035F  301A               	movlw	26
  1937  0360  00F1               	movwf	??_Lcd_Write_Char
  1938  0361                     u1307:	
  1939  0361  0BF1               	decfsz	??_Lcd_Write_Char,f
  1940  0362  2B61               	goto	u1307
  1941  0363  0000               	nop
  1942                           
  1943                           ;lcd.h: 90: RD3 = 0;
  1944  0364  1283               	bcf	3,5	;RP0=0, select bank0
  1945  0365  1303               	bcf	3,6	;RP1=0, select bank0
  1946  0366  1188               	bcf	8,3	;volatile
  1947                           
  1948                           ;lcd.h: 91: Lcd_Port(temp);
  1949  0367  0872               	movf	Lcd_Write_Char@temp,w
  1950  0368  120A  118A  22C9  120A  118A  	fcall	_Lcd_Port
  1951                           
  1952                           ;lcd.h: 92: RD3 = 1;
  1953  036D  1283               	bcf	3,5	;RP0=0, select bank0
  1954  036E  1303               	bcf	3,6	;RP1=0, select bank0
  1955  036F  1588               	bsf	8,3	;volatile
  1956                           
  1957                           ;lcd.h: 93: _delay((unsigned long)((40)*(8000000/4000000.0)));
  1958  0370  301A               	movlw	26
  1959  0371  00F1               	movwf	??_Lcd_Write_Char
  1960  0372                     u1317:	
  1961  0372  0BF1               	decfsz	??_Lcd_Write_Char,f
  1962  0373  2B72               	goto	u1317
  1963  0374  0000               	nop
  1964                           
  1965                           ;lcd.h: 94: RD3 = 0;
  1966  0375  1283               	bcf	3,5	;RP0=0, select bank0
  1967  0376  1303               	bcf	3,6	;RP1=0, select bank0
  1968  0377  1188               	bcf	8,3	;volatile
  1969  0378  0008               	return
  1970  0379                     __end_of_Lcd_Write_Char:	
  1971                           
  1972                           	psect	text9
  1973  0379                     __ptext9:	
  1974 ;; *************** function _Lcd_Set_Cursor *****************
  1975 ;; Defined at:
  1976 ;;		line 41 in file "lcd.h"
  1977 ;; Parameters:    Size  Location     Type
  1978 ;;  a               1    wreg     unsigned char 
  1979 ;;  b               1    4[COMMON] unsigned char 
  1980 ;; Auto vars:     Size  Location     Type
  1981 ;;  a               1    7[COMMON] unsigned char 
  1982 ;;  temp            1   10[COMMON] unsigned char 
  1983 ;;  y               1    9[COMMON] unsigned char 
  1984 ;;  z               1    8[COMMON] unsigned char 
  1985 ;; Return value:  Size  Location     Type
  1986 ;;		None               void
  1987 ;; Registers used:
  1988 ;;		wreg, status,2, status,0, pclath, cstack
  1989 ;; Tracked objects:
  1990 ;;		On entry : 0/0
  1991 ;;		On exit  : 0/0
  1992 ;;		Unchanged: 0/0
  1993 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1994 ;;      Params:         1       0       0       0       0
  1995 ;;      Locals:         4       0       0       0       0
  1996 ;;      Temps:          2       0       0       0       0
  1997 ;;      Totals:         7       0       0       0       0
  1998 ;;Total ram usage:        7 bytes
  1999 ;; Hardware stack levels used:    1
  2000 ;; Hardware stack levels required when called:    2
  2001 ;; This function calls:
  2002 ;;		_Lcd_Cmd
  2003 ;; This function is called by:
  2004 ;;		_main
  2005 ;; This function uses a non-reentrant model
  2006 ;;
  2007                           
  2008                           
  2009                           ;psect for function _Lcd_Set_Cursor
  2010  0379                     _Lcd_Set_Cursor:	
  2011                           
  2012                           ;incstack = 0
  2013                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  2014                           ;Lcd_Set_Cursor@a stored from wreg
  2015  0379  00F7               	movwf	Lcd_Set_Cursor@a
  2016                           
  2017                           ;lcd.h: 43: char temp,z,y;
  2018                           ;lcd.h: 44: if(a == 1)
  2019  037A  0877               	movf	Lcd_Set_Cursor@a,w
  2020  037B  3A01               	xorlw	1
  2021  037C  1D03               	skipz
  2022  037D  2B9F               	goto	l986
  2023                           
  2024                           ;lcd.h: 45: {
  2025                           ;lcd.h: 46: temp = 0x80 + b - 1;
  2026  037E  0874               	movf	Lcd_Set_Cursor@b,w
  2027  037F  3E7F               	addlw	127
  2028  0380  00F5               	movwf	??_Lcd_Set_Cursor
  2029  0381  0875               	movf	??_Lcd_Set_Cursor,w
  2030  0382  00FA               	movwf	Lcd_Set_Cursor@temp
  2031                           
  2032                           ;lcd.h: 47: z = temp>>4;
  2033  0383  087A               	movf	Lcd_Set_Cursor@temp,w
  2034  0384  00F5               	movwf	??_Lcd_Set_Cursor
  2035  0385  3004               	movlw	4
  2036  0386                     u815:	
  2037  0386  1003               	clrc
  2038  0387  0CF5               	rrf	??_Lcd_Set_Cursor,f
  2039  0388  3EFF               	addlw	-1
  2040  0389  1D03               	skipz
  2041  038A  2B86               	goto	u815
  2042  038B  0875               	movf	??_Lcd_Set_Cursor,w
  2043  038C  00F6               	movwf	??_Lcd_Set_Cursor+1
  2044  038D  0876               	movf	??_Lcd_Set_Cursor+1,w
  2045  038E  00F8               	movwf	Lcd_Set_Cursor@z
  2046                           
  2047                           ;lcd.h: 48: y = temp & 0x0F;
  2048  038F  087A               	movf	Lcd_Set_Cursor@temp,w
  2049  0390  390F               	andlw	15
  2050  0391  00F5               	movwf	??_Lcd_Set_Cursor
  2051  0392  0875               	movf	??_Lcd_Set_Cursor,w
  2052  0393  00F9               	movwf	Lcd_Set_Cursor@y
  2053                           
  2054                           ;lcd.h: 49: Lcd_Cmd(z);
  2055  0394  0878               	movf	Lcd_Set_Cursor@z,w
  2056  0395  120A  118A  22E3  120A  118A  	fcall	_Lcd_Cmd
  2057                           
  2058                           ;lcd.h: 50: Lcd_Cmd(y);
  2059  039A  0879               	movf	Lcd_Set_Cursor@y,w
  2060  039B  120A  118A  22E3   	fcall	_Lcd_Cmd
  2061                           
  2062                           ;lcd.h: 51: }
  2063  039E  0008               	return
  2064  039F                     l986:	
  2065                           
  2066                           ;lcd.h: 52: else if(a == 2)
  2067  039F  0877               	movf	Lcd_Set_Cursor@a,w
  2068  03A0  3A02               	xorlw	2
  2069  03A1  1D03               	skipz
  2070  03A2  0008               	return
  2071                           
  2072                           ;lcd.h: 53: {
  2073                           ;lcd.h: 54: temp = 0xC0 + b - 1;
  2074  03A3  0874               	movf	Lcd_Set_Cursor@b,w
  2075  03A4  3EBF               	addlw	191
  2076  03A5  00F5               	movwf	??_Lcd_Set_Cursor
  2077  03A6  0875               	movf	??_Lcd_Set_Cursor,w
  2078  03A7  00FA               	movwf	Lcd_Set_Cursor@temp
  2079                           
  2080                           ;lcd.h: 55: z = temp>>4;
  2081  03A8  087A               	movf	Lcd_Set_Cursor@temp,w
  2082  03A9  00F5               	movwf	??_Lcd_Set_Cursor
  2083  03AA  3004               	movlw	4
  2084  03AB                     u835:	
  2085  03AB  1003               	clrc
  2086  03AC  0CF5               	rrf	??_Lcd_Set_Cursor,f
  2087  03AD  3EFF               	addlw	-1
  2088  03AE  1D03               	skipz
  2089  03AF  2BAB               	goto	u835
  2090  03B0  0875               	movf	??_Lcd_Set_Cursor,w
  2091  03B1  00F6               	movwf	??_Lcd_Set_Cursor+1
  2092  03B2  0876               	movf	??_Lcd_Set_Cursor+1,w
  2093  03B3  00F8               	movwf	Lcd_Set_Cursor@z
  2094                           
  2095                           ;lcd.h: 56: y = temp & 0x0F;
  2096  03B4  087A               	movf	Lcd_Set_Cursor@temp,w
  2097  03B5  390F               	andlw	15
  2098  03B6  00F5               	movwf	??_Lcd_Set_Cursor
  2099  03B7  0875               	movf	??_Lcd_Set_Cursor,w
  2100  03B8  00F9               	movwf	Lcd_Set_Cursor@y
  2101                           
  2102                           ;lcd.h: 57: Lcd_Cmd(z);
  2103  03B9  0878               	movf	Lcd_Set_Cursor@z,w
  2104  03BA  120A  118A  22E3  120A  118A  	fcall	_Lcd_Cmd
  2105                           
  2106                           ;lcd.h: 58: Lcd_Cmd(y);
  2107  03BF  0879               	movf	Lcd_Set_Cursor@y,w
  2108  03C0  120A  118A  22E3   	fcall	_Lcd_Cmd
  2109  03C3  0008               	return
  2110  03C4                     __end_of_Lcd_Set_Cursor:	
  2111                           
  2112                           	psect	text10
  2113  0411                     __ptext10:	
  2114 ;; *************** function _Lcd_Init *****************
  2115 ;; Defined at:
  2116 ;;		line 62 in file "lcd.h"
  2117 ;; Parameters:    Size  Location     Type
  2118 ;;		None
  2119 ;; Auto vars:     Size  Location     Type
  2120 ;;		None
  2121 ;; Return value:  Size  Location     Type
  2122 ;;		None               void
  2123 ;; Registers used:
  2124 ;;		wreg, status,2, status,0, pclath, cstack
  2125 ;; Tracked objects:
  2126 ;;		On entry : 0/0
  2127 ;;		On exit  : 0/0
  2128 ;;		Unchanged: 0/0
  2129 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2130 ;;      Params:         0       0       0       0       0
  2131 ;;      Locals:         0       0       0       0       0
  2132 ;;      Temps:          2       0       0       0       0
  2133 ;;      Totals:         2       0       0       0       0
  2134 ;;Total ram usage:        2 bytes
  2135 ;; Hardware stack levels used:    1
  2136 ;; Hardware stack levels required when called:    2
  2137 ;; This function calls:
  2138 ;;		_Lcd_Cmd
  2139 ;;		_Lcd_Port
  2140 ;; This function is called by:
  2141 ;;		_main
  2142 ;; This function uses a non-reentrant model
  2143 ;;
  2144                           
  2145                           
  2146                           ;psect for function _Lcd_Init
  2147  0411                     _Lcd_Init:	
  2148                           
  2149                           ;lcd.h: 64: Lcd_Port(0x00);
  2150                           
  2151                           ;incstack = 0
  2152                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  2153  0411  3000               	movlw	0
  2154  0412  120A  118A  22C9  120A  118A  	fcall	_Lcd_Port
  2155                           
  2156                           ;lcd.h: 65: _delay((unsigned long)((20)*(8000000/4000.0)));
  2157  0417  3034               	movlw	52
  2158  0418  00F5               	movwf	??_Lcd_Init+1
  2159  0419  30F1               	movlw	241
  2160  041A  00F4               	movwf	??_Lcd_Init
  2161  041B                     u1327:	
  2162  041B  0BF4               	decfsz	??_Lcd_Init,f
  2163  041C  2C1B               	goto	u1327
  2164  041D  0BF5               	decfsz	??_Lcd_Init+1,f
  2165  041E  2C1B               	goto	u1327
  2166  041F  2C20               	nop2
  2167                           
  2168                           ;lcd.h: 66: Lcd_Cmd(0x03);
  2169  0420  3003               	movlw	3
  2170  0421  120A  118A  22E3  120A  118A  	fcall	_Lcd_Cmd
  2171                           
  2172                           ;lcd.h: 67: _delay((unsigned long)((5)*(8000000/4000.0)));
  2173  0426  300D               	movlw	13
  2174  0427  00F5               	movwf	??_Lcd_Init+1
  2175  0428  30FB               	movlw	251
  2176  0429  00F4               	movwf	??_Lcd_Init
  2177  042A                     u1337:	
  2178  042A  0BF4               	decfsz	??_Lcd_Init,f
  2179  042B  2C2A               	goto	u1337
  2180  042C  0BF5               	decfsz	??_Lcd_Init+1,f
  2181  042D  2C2A               	goto	u1337
  2182  042E  2C2F               	nop2
  2183                           
  2184                           ;lcd.h: 68: Lcd_Cmd(0x03);
  2185  042F  3003               	movlw	3
  2186  0430  120A  118A  22E3  120A  118A  	fcall	_Lcd_Cmd
  2187                           
  2188                           ;lcd.h: 69: _delay((unsigned long)((11)*(8000000/4000.0)));
  2189  0435  301D               	movlw	29
  2190  0436  00F5               	movwf	??_Lcd_Init+1
  2191  0437  3091               	movlw	145
  2192  0438  00F4               	movwf	??_Lcd_Init
  2193  0439                     u1347:	
  2194  0439  0BF4               	decfsz	??_Lcd_Init,f
  2195  043A  2C39               	goto	u1347
  2196  043B  0BF5               	decfsz	??_Lcd_Init+1,f
  2197  043C  2C39               	goto	u1347
  2198                           
  2199                           ;lcd.h: 70: Lcd_Cmd(0x03);
  2200  043D  3003               	movlw	3
  2201  043E  120A  118A  22E3  120A  118A  	fcall	_Lcd_Cmd
  2202                           
  2203                           ;lcd.h: 72: Lcd_Cmd(0x02);
  2204  0443  3002               	movlw	2
  2205  0444  120A  118A  22E3  120A  118A  	fcall	_Lcd_Cmd
  2206                           
  2207                           ;lcd.h: 73: Lcd_Cmd(0x02);
  2208  0449  3002               	movlw	2
  2209  044A  120A  118A  22E3  120A  118A  	fcall	_Lcd_Cmd
  2210                           
  2211                           ;lcd.h: 74: Lcd_Cmd(0x08);
  2212  044F  3008               	movlw	8
  2213  0450  120A  118A  22E3  120A  118A  	fcall	_Lcd_Cmd
  2214                           
  2215                           ;lcd.h: 75: Lcd_Cmd(0x00);
  2216  0455  3000               	movlw	0
  2217  0456  120A  118A  22E3  120A  118A  	fcall	_Lcd_Cmd
  2218                           
  2219                           ;lcd.h: 76: Lcd_Cmd(0x0C);
  2220  045B  300C               	movlw	12
  2221  045C  120A  118A  22E3  120A  118A  	fcall	_Lcd_Cmd
  2222                           
  2223                           ;lcd.h: 77: Lcd_Cmd(0x00);
  2224  0461  3000               	movlw	0
  2225  0462  120A  118A  22E3  120A  118A  	fcall	_Lcd_Cmd
  2226                           
  2227                           ;lcd.h: 78: Lcd_Cmd(0x06);
  2228  0467  3006               	movlw	6
  2229  0468  120A  118A  22E3   	fcall	_Lcd_Cmd
  2230  046B  0008               	return
  2231  046C                     __end_of_Lcd_Init:	
  2232                           
  2233                           	psect	text11
  2234  02BE                     __ptext11:	
  2235 ;; *************** function _Lcd_Clear *****************
  2236 ;; Defined at:
  2237 ;;		line 35 in file "lcd.h"
  2238 ;; Parameters:    Size  Location     Type
  2239 ;;		None
  2240 ;; Auto vars:     Size  Location     Type
  2241 ;;		None
  2242 ;; Return value:  Size  Location     Type
  2243 ;;                  2   46[COMMON] int 
  2244 ;; Registers used:
  2245 ;;		wreg, status,2, status,0, pclath, cstack
  2246 ;; Tracked objects:
  2247 ;;		On entry : 0/0
  2248 ;;		On exit  : 0/0
  2249 ;;		Unchanged: 0/0
  2250 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2251 ;;      Params:         0       0       0       0       0
  2252 ;;      Locals:         0       0       0       0       0
  2253 ;;      Temps:          0       0       0       0       0
  2254 ;;      Totals:         0       0       0       0       0
  2255 ;;Total ram usage:        0 bytes
  2256 ;; Hardware stack levels used:    1
  2257 ;; Hardware stack levels required when called:    2
  2258 ;; This function calls:
  2259 ;;		_Lcd_Cmd
  2260 ;; This function is called by:
  2261 ;;		_main
  2262 ;; This function uses a non-reentrant model
  2263 ;;
  2264                           
  2265                           
  2266                           ;psect for function _Lcd_Clear
  2267  02BE                     _Lcd_Clear:	
  2268                           
  2269                           ;lcd.h: 37: Lcd_Cmd(0);
  2270                           
  2271                           ;incstack = 0
  2272                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  2273  02BE  3000               	movlw	0
  2274  02BF  120A  118A  22E3  120A  118A  	fcall	_Lcd_Cmd
  2275                           
  2276                           ;lcd.h: 38: Lcd_Cmd(1);
  2277  02C4  3001               	movlw	1
  2278  02C5  120A  118A  22E3   	fcall	_Lcd_Cmd
  2279  02C8  0008               	return
  2280  02C9                     __end_of_Lcd_Clear:	
  2281                           
  2282                           	psect	text12
  2283  02E3                     __ptext12:	
  2284 ;; *************** function _Lcd_Cmd *****************
  2285 ;; Defined at:
  2286 ;;		line 26 in file "lcd.h"
  2287 ;; Parameters:    Size  Location     Type
  2288 ;;  a               1    wreg     unsigned char 
  2289 ;; Auto vars:     Size  Location     Type
  2290 ;;  a               1    3[COMMON] unsigned char 
  2291 ;; Return value:  Size  Location     Type
  2292 ;;		None               void
  2293 ;; Registers used:
  2294 ;;		wreg, status,2, status,0, pclath, cstack
  2295 ;; Tracked objects:
  2296 ;;		On entry : 0/0
  2297 ;;		On exit  : 0/0
  2298 ;;		Unchanged: 0/0
  2299 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2300 ;;      Params:         0       0       0       0       0
  2301 ;;      Locals:         1       0       0       0       0
  2302 ;;      Temps:          2       0       0       0       0
  2303 ;;      Totals:         3       0       0       0       0
  2304 ;;Total ram usage:        3 bytes
  2305 ;; Hardware stack levels used:    1
  2306 ;; Hardware stack levels required when called:    1
  2307 ;; This function calls:
  2308 ;;		_Lcd_Port
  2309 ;; This function is called by:
  2310 ;;		_Lcd_Clear
  2311 ;;		_Lcd_Set_Cursor
  2312 ;;		_Lcd_Init
  2313 ;;		_Lcd_Shift_Right
  2314 ;;		_Lcd_Shift_Left
  2315 ;; This function uses a non-reentrant model
  2316 ;;
  2317                           
  2318                           
  2319                           ;psect for function _Lcd_Cmd
  2320  02E3                     _Lcd_Cmd:	
  2321                           
  2322                           ;incstack = 0
  2323                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  2324                           ;Lcd_Cmd@a stored from wreg
  2325  02E3  00F3               	movwf	Lcd_Cmd@a
  2326                           
  2327                           ;lcd.h: 28: RD2 = 0;
  2328  02E4  1283               	bcf	3,5	;RP0=0, select bank0
  2329  02E5  1303               	bcf	3,6	;RP1=0, select bank0
  2330  02E6  1108               	bcf	8,2	;volatile
  2331                           
  2332                           ;lcd.h: 29: Lcd_Port(a);
  2333  02E7  0873               	movf	Lcd_Cmd@a,w
  2334  02E8  120A  118A  22C9  120A  118A  	fcall	_Lcd_Port
  2335                           
  2336                           ;lcd.h: 30: RD3 = 1;
  2337  02ED  1283               	bcf	3,5	;RP0=0, select bank0
  2338  02EE  1303               	bcf	3,6	;RP1=0, select bank0
  2339  02EF  1588               	bsf	8,3	;volatile
  2340                           
  2341                           ;lcd.h: 31: _delay((unsigned long)((4)*(8000000/4000.0)));
  2342  02F0  300B               	movlw	11
  2343  02F1  00F2               	movwf	??_Lcd_Cmd+1
  2344  02F2  3062               	movlw	98
  2345  02F3  00F1               	movwf	??_Lcd_Cmd
  2346  02F4                     u1357:	
  2347  02F4  0BF1               	decfsz	??_Lcd_Cmd,f
  2348  02F5  2AF4               	goto	u1357
  2349  02F6  0BF2               	decfsz	??_Lcd_Cmd+1,f
  2350  02F7  2AF4               	goto	u1357
  2351  02F8  0000               	nop
  2352                           
  2353                           ;lcd.h: 32: RD3 = 0;
  2354  02F9  1283               	bcf	3,5	;RP0=0, select bank0
  2355  02FA  1303               	bcf	3,6	;RP1=0, select bank0
  2356  02FB  1188               	bcf	8,3	;volatile
  2357  02FC  0008               	return
  2358  02FD                     __end_of_Lcd_Cmd:	
  2359                           
  2360                           	psect	text13
  2361  02C9                     __ptext13:	
  2362 ;; *************** function _Lcd_Port *****************
  2363 ;; Defined at:
  2364 ;;		line 4 in file "lcd.h"
  2365 ;; Parameters:    Size  Location     Type
  2366 ;;  a               1    wreg     unsigned char 
  2367 ;; Auto vars:     Size  Location     Type
  2368 ;;  a               1    0[COMMON] unsigned char 
  2369 ;; Return value:  Size  Location     Type
  2370 ;;		None               void
  2371 ;; Registers used:
  2372 ;;		wreg
  2373 ;; Tracked objects:
  2374 ;;		On entry : 0/0
  2375 ;;		On exit  : 0/0
  2376 ;;		Unchanged: 0/0
  2377 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2378 ;;      Params:         0       0       0       0       0
  2379 ;;      Locals:         1       0       0       0       0
  2380 ;;      Temps:          0       0       0       0       0
  2381 ;;      Totals:         1       0       0       0       0
  2382 ;;Total ram usage:        1 bytes
  2383 ;; Hardware stack levels used:    1
  2384 ;; This function calls:
  2385 ;;		Nothing
  2386 ;; This function is called by:
  2387 ;;		_Lcd_Cmd
  2388 ;;		_Lcd_Init
  2389 ;;		_Lcd_Write_Char
  2390 ;; This function uses a non-reentrant model
  2391 ;;
  2392                           
  2393                           
  2394                           ;psect for function _Lcd_Port
  2395  02C9                     _Lcd_Port:	
  2396                           
  2397                           ;incstack = 0
  2398                           ; Regs used in _Lcd_Port: [wreg]
  2399                           ;Lcd_Port@a stored from wreg
  2400  02C9  00F0               	movwf	Lcd_Port@a
  2401                           
  2402                           ;lcd.h: 6: if(a & 1)
  2403  02CA  1C70               	btfss	Lcd_Port@a,0
  2404  02CB  2AD0               	goto	l33
  2405                           
  2406                           ;lcd.h: 7: RD4 = 1;
  2407  02CC  1283               	bcf	3,5	;RP0=0, select bank0
  2408  02CD  1303               	bcf	3,6	;RP1=0, select bank0
  2409  02CE  1608               	bsf	8,4	;volatile
  2410  02CF  2AD3               	goto	l34
  2411  02D0                     l33:	
  2412                           
  2413                           ;lcd.h: 8: else
  2414                           ;lcd.h: 9: RD4 = 0;
  2415  02D0  1283               	bcf	3,5	;RP0=0, select bank0
  2416  02D1  1303               	bcf	3,6	;RP1=0, select bank0
  2417  02D2  1208               	bcf	8,4	;volatile
  2418  02D3                     l34:	
  2419                           
  2420                           ;lcd.h: 11: if(a & 2)
  2421  02D3  1CF0               	btfss	Lcd_Port@a,1
  2422  02D4  2AD7               	goto	l35
  2423                           
  2424                           ;lcd.h: 12: RD5 = 1;
  2425  02D5  1688               	bsf	8,5	;volatile
  2426  02D6  2AD8               	goto	l36
  2427  02D7                     l35:	
  2428                           
  2429                           ;lcd.h: 13: else
  2430                           ;lcd.h: 14: RD5 = 0;
  2431  02D7  1288               	bcf	8,5	;volatile
  2432  02D8                     l36:	
  2433                           
  2434                           ;lcd.h: 16: if(a & 4)
  2435  02D8  1D70               	btfss	Lcd_Port@a,2
  2436  02D9  2ADC               	goto	l37
  2437                           
  2438                           ;lcd.h: 17: RD6 = 1;
  2439  02DA  1708               	bsf	8,6	;volatile
  2440  02DB  2ADD               	goto	l38
  2441  02DC                     l37:	
  2442                           
  2443                           ;lcd.h: 18: else
  2444                           ;lcd.h: 19: RD6 = 0;
  2445  02DC  1308               	bcf	8,6	;volatile
  2446  02DD                     l38:	
  2447                           
  2448                           ;lcd.h: 21: if(a & 8)
  2449  02DD  1DF0               	btfss	Lcd_Port@a,3
  2450  02DE  2AE1               	goto	l39
  2451                           
  2452                           ;lcd.h: 22: RD7 = 1;
  2453  02DF  1788               	bsf	8,7	;volatile
  2454  02E0  0008               	return
  2455  02E1                     l39:	
  2456                           
  2457                           ;lcd.h: 23: else
  2458                           ;lcd.h: 24: RD7 = 0;
  2459  02E1  1388               	bcf	8,7	;volatile
  2460  02E2  0008               	return
  2461  02E3                     __end_of_Lcd_Port:	
  2462  007E                     btemp	set	126	;btemp
  2463  007E                     wtemp	set	126
  2464  007E                     wtemp0	set	126
  2465  0080                     wtemp1	set	128
  2466  0082                     wtemp2	set	130
  2467  0084                     wtemp3	set	132
  2468  0086                     wtemp4	set	134
  2469  0088                     wtemp5	set	136
  2470  007F                     wtemp6	set	127
  2471  007E                     ttemp	set	126
  2472  007E                     ttemp0	set	126
  2473  0081                     ttemp1	set	129
  2474  0084                     ttemp2	set	132
  2475  0087                     ttemp3	set	135
  2476  007F                     ttemp4	set	127
  2477  007E                     ltemp	set	126
  2478  007E                     ltemp0	set	126
  2479  0082                     ltemp1	set	130
  2480  0086                     ltemp2	set	134
  2481  0080                     ltemp3	set	128


Data Sizes:
    Strings     53
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     35      35
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    Lcd_Write_String@a	PTR unsigned char  size(1) Largest target is 13
		 -> STR_5(CODE[13]), STR_4(CODE[3]), STR_3(CODE[12]), STR_2(CODE[12]), 
		 -> STR_1(CODE[13]), 


Critical Paths under _main in COMMON

    _main->___awtoft
    ___fttol->___awtoft
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _main in BANK0

    _main->___fttol
    ___fttol->___ftdiv

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0    7071
                                             30 BANK0      5     5      0
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                     _Lcd_Write_Char
                   _Lcd_Write_String
                            ___awdiv
                            ___awmod
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (1) ___fttol                                             14    10      4     305
                                             16 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
 ---------------------------------------------------------------------------------
 (1) ___ftdiv                                             16    10      6    1993
                                              0 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) ___awtoft                                             6     3      3    1751
                                              8 COMMON     6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftpack                                             8     3      5    1607
                                              0 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              7     3      4     614
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              9     5      4     512
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     3     3      0     403
                                              5 COMMON     3     3      0
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       4     4      0     178
                                              1 COMMON     4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       7     6      1     804
                                              4 COMMON     7     6      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     198
                                              4 COMMON     2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              3     3      0     110
                                              1 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      88
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_Char
     _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   ___awdiv
   ___awmod
   ___awtoft
     ___ftpack
   ___ftdiv
     ___awtoft (ARG)
       ___ftpack
     ___ftpack (ARG)
   ___fttol
     ___awtoft (ARG)
       ___ftpack
     ___ftdiv (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     23      23       5       43.8%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       0      12        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Wed Aug 20 13:56:52 2014

                        pc 0002                __CFG_CP$OFF 0000                         l33 02D0  
                       l34 02D3                         l35 02D7                         l36 02D8  
                       l37 02DC                         l38 02DD                         l39 02E1  
                       l75 06C0                         l78 06C3               ___awdiv@sign 0076  
                       fsr 0004                        l330 04FD                        l336 0516  
                      l952 04D6                        l962 0502                        l954 04E2  
                      l964 050C                        l956 04E7                        l948 04CF  
                      l986 039F                        _RB0 0030                        _RB4 0034  
                      _RD2 0042                        _RD3 0043                        _RD4 0044  
                      _RD5 0045                        _RD6 0046                        _RD7 0047  
             __CFG_CPD$OFF 0000                        u715 04DB                        u815 0386  
                      u735 04F6                        u905 0498                        u835 03AB  
                      u915 04A4                        u755 0505                        u685 0351  
                      u925 04AE                        u785 051D                        u885 048C  
                      u985 03DE                        fsr0 0004               ___awmod@sign 0076  
             __CFG_FOSC$HS 0000               __CFG_LVP$OFF 0000               ___ftdiv@cntr 002A  
             ___ftdiv@sign 002F                       l1012 0321                       l1022 0476  
                     l1040 0497                       l1104 0307                       l1120 05EB  
                     l1050 04B8                       l1114 05D5                       l1028 0481  
                     l1054 04C0                       l1046 04AD                       l1038 0489  
                     l1070 03D5                       l1142 064F                       l1134 0630  
                     l1080 03E9                       l1066 03CE                       l1218 06B3  
                     l1092 040A                       l1084 03F7                       l1156 0549  
                     l1260 07DA                       l1078 03DB                       l1190 05B4  
                     l1182 0598                       l1174 057B                       l1088 0402  
                     l1184 05A3                       l1176 058B                       l1186 05A6  
                     STR_1 0016                       STR_2 002F                       STR_3 0023  
                     STR_4 003B                       STR_5 0009                       u1005 03EF  
                     u1015 03F8                       u1105 0642                       u1115 0650  
                     u1205 059A                       u1145 0550                       u1307 0361  
                     u1075 05FD                       u1317 0372                       u1085 060F  
                     u1327 041B                       u1095 0631                       u1175 057C  
                     u1255 0710                       u1337 042A                       u1265 071D  
                     u1347 0439                       u1357 02F4                       u1277 06A3  
                     u1287 06BA                       u1297 07F5               __CFG_WRT$OFF 0000  
        ?_Lcd_Write_String 0070                       _main 0675               ___ftpack@arg 0070  
             ___ftpack@exp 0073                       btemp 007E              __CFG_BOREN$ON 0000  
                     ltemp 007E                       start 0000                       ttemp 007E  
       ??_Lcd_Write_String 0075                       wtemp 007E            __end_of_Lcd_Cmd 02FD  
             ___fttol@exp1 003D               ___fttol@lval 0039                      ?_main 0070  
          __end_of___awdiv 04C7              __CFG_WDTE$OFF 0000            __end_of___awmod 0411  
          __end_of___ftdiv 0675            ___awdiv@divisor 0070                      _T1CON 0010  
          __end_of___fttol 05BD            ___awdiv@counter 0075                      _TMR1H 000F  
                    _TMR1L 000E    __size_of_Lcd_Set_Cursor 004B                      _TRISB 0086  
                    _TRISD 0088              ___awtoft@sign 007D              ___ftpack@sign 0074  
                    main@a 0041                      pclath 000A                      ltemp0 007E  
                    ltemp1 0082                      ltemp2 0086                      ltemp3 0080  
                    ttemp0 007E                      ttemp1 0081                      ttemp2 0084  
                    ttemp3 0087                      ttemp4 007F                      status 0003  
                    wtemp0 007E                      wtemp1 0080                      wtemp2 0082  
                    wtemp3 0084                      wtemp4 0086                      wtemp5 0088  
                    wtemp6 007F           __end_of_Lcd_Init 046C           __end_of_Lcd_Port 02E3  
          __initialization 07FC               __end_of_main 07FC                     ??_main 003E  
            ___fttol@sign1 0038         __size_of_Lcd_Clear 000B           ___awdiv@dividend 0072  
         __end_of___awtoft 031E           __end_of___ftpack 052F                  ??_Lcd_Cmd 0071  
                   _TMR1ON 0080    __size_of_Lcd_Write_Char 0039             __CFG_PWRTE$OFF 0000  
                ??___awdiv 0074                  ??___awmod 0074                  ??___ftdiv 0026  
                ??___fttol 0034           ___awdiv@quotient 0077            ___awmod@divisor 0070  
          ___awmod@counter 0075            Lcd_Set_Cursor@a 0077            Lcd_Set_Cursor@b 0074  
          Lcd_Set_Cursor@y 0079            Lcd_Set_Cursor@z 0078    __end_of__initialization 07FC  
        __end_of_Lcd_Clear 02C9                 ___ftdiv@f1 0023                 ___ftdiv@f2 0020  
               ___ftdiv@f3 002B                 ___awtoft@c 0078                 ___fttol@f1 0030  
           __pcstackCOMMON 0070             _Lcd_Set_Cursor 0379                  ?_Lcd_Init 0070  
                ?_Lcd_Port 0070                 __pmaintext 0675  __size_of_Lcd_Write_String 0022  
                ?___awtoft 0078                  ?___ftpack 0070     __end_of_Lcd_Set_Cursor 03C4  
               ??_Lcd_Init 0074                 ??_Lcd_Port 0070                 __stringtab 0003  
           _Lcd_Write_Char 0340                    _Lcd_Cmd 02E3                    ___awdiv 046C  
                  ___awmod 03C4                    ___ftdiv 05BD                    ___fttol 052F  
               ??___awtoft 007B                 ??___ftpack 0075            ?_Lcd_Set_Cursor 0074  
                  __ptext1 052F                    __ptext2 05BD                    __ptext3 02FD  
                  __ptext4 04C7                    __ptext5 03C4                    __ptext6 046C  
                  __ptext7 031E                    __ptext8 0340                    __ptext9 0379  
         ___awmod@dividend 0072     __end_of_Lcd_Write_Char 0379       end_of_initialization 07FC  
                Lcd_Port@a 0070            ?_Lcd_Write_Char 0070          Lcd_Write_String@a 0077  
        Lcd_Write_String@i 0075                ___ftdiv@exp 002E                  _Lcd_Clear 02BE  
         _Lcd_Write_String 031E        start_initialization 07FC          __size_of_Lcd_Init 005B  
        __size_of_Lcd_Port 001A                 ?_Lcd_Clear 0070            Lcd_Write_Char@a 0074  
          Lcd_Write_Char@y 0073          __size_of___awtoft 0021          __size_of___ftpack 0068  
                ___latbits 0002              __pcstackBANK0 0020        __end_of__stringdata 003E  
                 ?_Lcd_Cmd 0070           ??_Lcd_Set_Cursor 0075                   ?___awdiv 0070  
                 ?___awmod 0070                   ?___ftdiv 0020                   ?___fttol 0030  
                __pstrings 0003                   Lcd_Cmd@a 0073                ??_Lcd_Clear 0074  
              __stringbase 0008                __stringdata 0009           ??_Lcd_Write_Char 0071  
                 _Lcd_Init 0411                   _Lcd_Port 02C9   __end_of_Lcd_Write_String 0340  
         __size_of_Lcd_Cmd 001A           __size_of___awdiv 005B           __size_of___awmod 004D  
         __size_of___ftdiv 00B8           __size_of___fttol 008E                   ___awtoft 02FD  
                 ___ftpack 04C7         __end_of__stringtab 0009                   __ptext10 0411  
                 __ptext11 02BE                   __ptext12 02E3                   __ptext13 02C9  
            __size_of_main 0187         Lcd_Write_Char@temp 0072                  stringcode 0003  
       Lcd_Set_Cursor@temp 007A                   stringdir 0003                   stringtab 0003  
